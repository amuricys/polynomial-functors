{-# OPTIONS --cubical --allow-unsolved-metas #-}

module Cubical.Proofs where

open import CategoryData.Everything
open import Level
open import Agda.Builtin.Unit
open import Data.Empty
import Relation.Binary.PropositionalEquality as Eq
open import Cubical.Data.Equality using (ctop ; ptoc)
open import Cubical.Core.Everything
open import Cubical.Categories.Category
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.HLevels
open import Cubical.Categories.Limits.Terminal
open import Cubical.Foundations.Isomorphism
open import Cubical.Data.Sigma.Properties
open import Data.Product hiding (Œ£-syntax)
open import Cubical.ArrowEquals

------- Categorical axioms
---------------------------------------
composeLeftIdentity : {B C : Polynomial} ‚Üí (bToC : Arrow B C) ‚Üí idArrow ‚àò‚Çö bToC ‚â° bToC
composeLeftIdentity (_ ‚áÑ _) = refl

composeRightIdentity :{B C : Polynomial} ‚Üí (cToB : Arrow C B) ‚Üí cToB ‚àò‚Çö idArrow ‚â° cToB
composeRightIdentity (_ ‚áÑ _) = refl

composeIsAssoc : ‚àÄ {A B C D} ‚Üí {f : Arrow A B} {g : Arrow B C} {h : Arrow C D} ‚Üí ((h ‚àò‚Çö g) ‚àò‚Çö f) ‚â° (h ‚àò‚Çö (g ‚àò‚Çö f))
composeIsAssoc = refl
---------------------------------------


------- Helpers idk what to do with
---------------------------------------
-- Got from here https://www.cse.chalmers.se/~abela/bigproof17/CubicalSolution.agda
-- trans : ‚àÄ{a}{A : Set a} {x y z : A} (p : x ‚â° y) (q : y ‚â° z) ‚Üí x ‚â° z
-- trans {x = x} p q = drive (Œª i ‚Üí x ‚â° q i) p
-- subst B p pa = transport (Œª i ‚Üí B (p i)) pa

transitivity : ‚àÄ {a} {A : Set a} {x y z : A} (p : x ‚â° y) ‚Üí (q : y ‚â° z) ‚Üí x ‚â° z
transitivity {x = x} p q = subst (_‚â°_ x) q p

-- We want B to be explicit in subst
-- subst : (B : A ‚Üí Type ‚Ñì') (p : x ‚â° y) ‚Üí B x ‚Üí B y
-- subst B p pa = transport (Œª i ‚Üí B (p i)) pa

equiv-resp : {A B C : Polynomial} {f h : Arrow B C} {g i : Arrow A B} ‚Üí f ‚â° h ‚Üí g ‚â° i ‚Üí (f ‚àò‚Çö g) ‚â° (h ‚àò‚Çö i)
equiv-resp  p q ii = (p ii) ‚àò‚Çö (q ii)

fromFalseFunctionsEqual : {A : Type} (f : ‚ä• ‚Üí A) ‚Üí (g : ‚ä• ‚Üí A) ‚Üí f ‚â° g
fromFalseFunctionsEqual f g = funExt Œª {()}

-- fromFalseFunctionsEqualAny : {A B : Type} (f : ‚ä• ‚Üí A) ‚Üí (g : ‚ä• ‚Üí B) ‚Üí f ‚â° g
-- fromFalseFunctionsEqualAny f g = {!   !}

------- Helper conversions and isomorphism between converted representations
---------------------------------------

isoArrowSigma : {A B : Polynomial} ‚Üí Iso (Arrow A B) (ArrowAsSigma A B)
isoArrowSigma = iso arrowToSigma sigmaToArrow (Œª b ‚Üí refl) (Œª a ‚Üí refl)
---------------------------------------

------- Proofs that two arrows are equal, or characterization of equality between arrows
---------------------------------------
arrowSigmasEqual : {p q : Polynomial} {f g : Arrow p q}
    ‚Üí (mapPosEq : Arrow.mapPosition f ‚â° Arrow.mapPosition g)
    ‚Üí transport -- Basically "assuming map on positions is equal, then proof that map on directions is equal"
            (Œª i ‚Üí
                (fromPos : Polynomial.position p) ‚Üí
                Polynomial.direction q (mapPosEq i fromPos) ‚Üí
                Polynomial.direction p fromPos)
            (Arrow.mapDirection f)
            ‚â° Arrow.mapDirection g
    ‚Üí arrowToSigma f ‚â° arrowToSigma g
arrowSigmasEqual {p = p} {q = q} {f = f} {g = g} mapPosEq mapDirEq = Œ£PathTransport‚ÜíPathŒ£ (arrowToSigma f) (arrowToSigma g) (mapPosEq , mapDirEq)

arrowsEqual : {p q : Polynomial} {f g : Arrow p q}
    ‚Üí (mapPosEq : Arrow.mapPosition f ‚â° Arrow.mapPosition g)
    ‚Üí transport -- Basically "assuming map on positions is equal, then proof that map on directions is equal"
            (Œª i ‚Üí
                (fromPos : Polynomial.position p) ‚Üí
                Polynomial.direction q (mapPosEq i fromPos) ‚Üí
                Polynomial.direction p fromPos)
            (Arrow.mapDirection f)
            ‚â° Arrow.mapDirection g
    ‚Üí f ‚â° g
arrowsEqual {p = p} {q = q} {f = f} {g = g} mapPosEq mapDirEq i = sigmaToArrow (arrowSigmasEqual {f = f} {g = g} mapPosEq mapDirEq i)

open Arrow
open Polynomial

-- X : {p q : Polynomial} ‚Üí Set
-- X {p} {q} = position p ‚Üí position q

-- A : {p q : Polynomial} ‚Üí X {p} {q} ‚Üí Set
-- A {p} {q} _ = position p

-- B : {p q : Polynomial} ‚Üí (x : X {p} {q}) ‚Üí A {p} {q} x ‚Üí Type
-- B {p} {q} h i = direction q (h i) ‚Üí direction p i

-- Œ† : {p q : Polynomial} ‚Üí X {p} {q} ‚Üí Type
-- Œ† {p} {q} = \ (x : X {p} {q}) ‚Üí (a : A {p} {q} x) ‚Üí B {p} {q} x a

-- BÃÇ : {p q : Polynomial} ‚Üí Œ£ (X {p} {q}) (A {p} {q}) ‚Üí Type
-- BÃÇ {p} {q} (w1 , w2) = B {p} {q} w1 w2


-- transportDep : {p q : Polynomial} {(f ‚áÑ f‚ôØ) (g ‚áÑ g‚ôØ) : Arrow p q} 
--   ‚Üí (fn : (a : A {p} {q} f) ‚Üí B {p} {q} f a) 
--   ‚Üí (pr : f ‚â° g) 
--   ‚Üí (a : A {p} {q} g) ‚Üí let
--   pairEq : ‚àÄ {one two } ‚Üí (one , a) ‚â° (two , subst (A {p} {q}) (sym pr) a)
--   pairEq = {!   !}
--   in
--   (subst (Œ† {p} {q}) pr fn a ‚â° subst (BÃÇ {p} {q}) (sym (pairEq {{!   !}} {{!   !}})) (fn (subst (A {p} {q}) (sym pr) a)))
-- transportDep {p} {q} pr f = {!  subst Œ†  !}

-- arrowsEqual2 : {p q : Polynomial} {f g : Arrow p q}
--     ‚Üí (mapPosEq : mapPosition f ‚â° mapPosition g)
--     ‚Üí ((x : position p) ‚Üí (y : direction q (mapPosition f x)) ‚Üí mapDirection f x y ‚â° mapDirection g x (subst (Œª mapPos ‚Üí direction q (mapPos x)) mapPosEq y) ) -- (subst (Œª mapPos ‚Üí direction q (mapPos x)) mapPosEq y)
--     ‚Üí f ‚â° g
-- arrowsEqual2 a b = arrowsEqual a (funExt Œª x ‚Üí funExt Œª y ‚Üí {! !}) -- Œª i ‚Üí transp {!   !} i {!   !})

arrowSigmasEqual3 : {p q : Polynomial} {f g : Arrow p q}
    ‚Üí (mapPosEq : Arrow.mapPosition f ‚â° Arrow.mapPosition g)
    ‚Üí ((x : position p) ‚Üí (y : direction q (mapPosition g x)) ‚Üí mapDirection f x  (subst (Œª mapPos ‚Üí direction q (mapPos x)) (sym mapPosEq) y) ‚â° mapDirection g x y)
    ‚Üí arrowToSigma f ‚â° arrowToSigma g
arrowSigmasEqual3 {p = p} {q = q} {f = f} {g = g} mapPosEq mapDirEq = Œ£PathTransport‚ÜíPathŒ£ (arrowToSigma f) (arrowToSigma g) (mapPosEq , funExt Œª x  ‚Üí funExt Œª y ‚Üí transitivity (lemma x y) (mapDirEq x y))
  where
    lemma : (x : position p) ‚Üí (y : direction q (mapPosition g x)) ‚Üí 
      (subst (Œª h ‚Üí (i : position p) ‚Üí direction q (h i) ‚Üí direction p i) mapPosEq (mapDirection f)) x y
      ‚â°
      mapDirection f x
      (subst (Œª h ‚Üí direction q (h x)) (sym mapPosEq) y)
    lemma x y i = transp (Œª j ‚Üí direction p (transp (Œª _ ‚Üí position p) (j ‚à® i) x)) i ((mapDirection f (transp (Œª _ ‚Üí position p) i x) (transp (Œª j ‚Üí direction q (mapPosEq (~ j) (transp (Œª _ ‚Üí position p) (~ j ‚à® i) x))) i0 y))) 


arrowsEqual3 : {p q : Polynomial} {f g : Arrow p q}
    ‚Üí (mapPosEq : mapPosition f ‚â° mapPosition g)
    ‚Üí (
           (x : position p) ‚Üí 
           (y : direction q (mapPosition g x)) ‚Üí 
           mapDirection f x  
           (subst (Œª mapPos ‚Üí direction q (mapPos x)) (sym mapPosEq) y) 
           ‚â° 
           mapDirection g x y
        )
    ‚Üí f ‚â° g
arrowsEqual3 {f = f} {g = g} a b i = sigmaToArrow (arrowSigmasEqual3 {f = f} {g = g} a b i)


---------------------------------------

------- Proofs related to uniqueness of arrows from and to certain polynomials
---------------------------------------
arrowFromZeroUnique : {p : Polynomial} (f : Arrow ùüò p) ‚Üí arrowFromZero ‚â° f
arrowFromZeroUnique f = arrow‚â° (funExt Œª ()) (funExt Œª ())

arrowToOneUnique : {p : Polynomial} (f : Arrow p ùüô) ‚Üí  arrowToOne ‚â° f
arrowToOneUnique {p = p} f = arrow‚â° refl (funExt Œª x ‚Üí funExt Œª ())

---------------------------------------

------- Proofs related to plugging in 0
---------------------------------------
fromMapInDirectionToFunction : {p q : Polynomial} ‚Üí (Polynomial.position p ‚Üí Polynomial.position q) ‚Üí p ‚¶Ö ‚ä§ ‚¶Ü ‚Üí q ‚¶Ö ‚ä§ ‚¶Ü
fromMapInDirectionToFunction {p} {q} f = \x ‚Üí
  f (fst x) , Œª _ ‚Üí tt

fromFunctionToMapOnPositions : {p q : Polynomial} ‚Üí (p ‚¶Ö ‚ä§ ‚¶Ü ‚Üí q ‚¶Ö ‚ä§ ‚¶Ü) ‚Üí (Polynomial.position p ‚Üí Polynomial.position q)
fromFunctionToMapOnPositions {p@(MkPoly pos dir)} {q} f = \x ‚Üí let
  y : q ‚¶Ö ‚ä§ ‚¶Ü
  y = f (x , Œª x‚ÇÅ ‚Üí tt)
  in
  fst y

plugIn1IsoToMapPosition : {p q : Polynomial} ‚Üí Iso (p ‚¶Ö ‚ä§ ‚¶Ü ‚Üí q ‚¶Ö ‚ä§ ‚¶Ü) (Polynomial.position p ‚Üí Polynomial.position q)
plugIn1IsoToMapPosition = iso fromFunctionToMapOnPositions fromMapInDirectionToFunction (Œª b ‚Üí refl) (Œª a ‚Üí refl)

-- Proposition Not sure if this maybe is so similar
-- Proposition 3.40 in the book. (page 85)
enclosePoly‚â°depFuncToDirections : {p : Polynomial} ‚Üí enclose p ‚â° ((i : Polynomial.position p) ‚Üí Polynomial.direction p i)
enclosePoly‚â°depFuncToDirections = isoToPath isoEnclosePolydepFuncToDirections
  where

    isoEnclosePolydepFuncToDirections : {p : Polynomial} ‚Üí Iso (enclose p) ((i : Polynomial.position p) ‚Üí Polynomial.direction p i)
    isoEnclosePolydepFuncToDirections = iso toRight toLeft (Œª _ ‚Üí refl) (Œª _ ‚Üí refl)
      where
        toRight : {p : Polynomial} ‚Üí enclose p ‚Üí ((i : Polynomial.position p) ‚Üí Polynomial.direction p i)
        toRight (mapPosition ‚áÑ mapDirection) pos = mapDirection pos tt

        toLeft : {p : Polynomial} ‚Üí ((i : Polynomial.position p) ‚Üí Polynomial.direction p i) ‚Üí enclose p
        toLeft p1 = (Œª x ‚Üí tt) ‚áÑ Œª fromPos x ‚Üí p1 fromPos

---------------------------------------


------- Specific arrow equalities
---------------------------------------
pwiseToExt : {A B : Set} {f g : A ‚Üí B} ‚Üí ({x : A} ‚Üí f x Eq.‚â° g x) ‚Üí f ‚â° g
pwiseToExt {A = A} {f = f} {g = g} p = let
  yaaa : {x : A} ‚Üí f x ‚â° g x
  yaaa = ptoc p
  in
  funExt (Œª x ‚Üí yaaa)

positionArrowsEqual : {A B : Polynomial} ‚Üí {f g : Arrow A B} ‚Üí f ‚â° g ‚Üí Arrow.mapPosition f ‚â° Arrow.mapPosition g
positionArrowsEqual p i = Arrow.mapPosition (p i)

positionArrowsEqualPwise : {A B : Polynomial} ‚Üí  {f g : Arrow A B} {z : Polynomial.position A} ‚Üí f ‚â° g ‚Üí Arrow.mapPosition f z ‚â° Arrow.mapPosition g z
positionArrowsEqualPwise {z = z} p i = let
  posEq = positionArrowsEqual p i
  in posEq z

positionArrowsEqualPwiseEq : {A B : Polynomial} {f g : Arrow A B} ‚Üí
      f ‚â° g ‚Üí
      {x : Polynomial.position A} ‚Üí
      Arrow.mapPosition f x Eq.‚â° Arrow.mapPosition g x
positionArrowsEqualPwiseEq p = ctop (positionArrowsEqualPwise p)
--  
-- Proof that for any polynomal p with index set I, p(1) ‚â° I
-- Proposition 2.43 in the book
I‚â°pOfOne : {A : Polynomial} ‚Üí A ‚¶Ö ‚ä§ ‚¶Ü ‚â° Polynomial.position A
I‚â°pOfOne = isoToPath isoI‚â°pOfOne
  where
    isoI‚â°pOfOne : {A : Polynomial} ‚Üí Iso (A ‚¶Ö ‚ä§ ‚¶Ü) (Polynomial.position A)
    isoI‚â°pOfOne = iso toRight toLeft inv1 inv2
      where
        toRight : {A : Polynomial} ‚Üí  A ‚¶Ö ‚ä§ ‚¶Ü ‚Üí Polynomial.position A
        toRight = fst

        toLeft : {A : Polynomial} ‚Üí Polynomial.position A ‚Üí A ‚¶Ö ‚ä§ ‚¶Ü 
        toLeft x = x , Œª x‚ÇÅ ‚Üí tt

        inv1 = Œª b ‚Üí refl
        inv2 = Œª {(fst‚ÇÅ , snd‚ÇÅ) ‚Üí refl}

-- derivative : Polynomial ‚Üí Polynomial
-- derivative (MkPoly pos dir) = MkPoly (Œ£ pos dir) (Œª {(i , a) ‚Üí {! dir i - a  !}})

  