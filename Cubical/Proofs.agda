{-# OPTIONS --cubical --allow-unsolved-metas #-}

module Cubical.Proofs where

open import CategoryData.Everything
open import Level
open import Agda.Builtin.Unit
open import Data.Empty
import Relation.Binary.PropositionalEquality as Eq
open import Cubical.Data.Equality using (eqToPath ; pathToEq)
open import Cubical.Core.Everything
open import Cubical.Categories.Category
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Transport
open import Cubical.Categories.Limits.Terminal
open import Cubical.Foundations.Isomorphism
open import Cubical.Data.Sigma.Properties
open import Data.Product hiding (Œ£-syntax)
open import Cubical.LensEquality
open import Data.Sum
open import Cubical.PolynomialEquals
open import Function

------- Categorical axioms
---------------------------------------
composeLeftIdentity : {B C : Polynomial} ‚Üí (bToC : Lens B C) ‚Üí idLens ‚àò‚Çö bToC ‚â° bToC
composeLeftIdentity (_ ‚áÜ _) = refl

composeRightIdentity :{B C : Polynomial} ‚Üí (cToB : Lens C B) ‚Üí cToB ‚àò‚Çö idLens ‚â° cToB
composeRightIdentity (_ ‚áÜ _) = refl

composeIsAssoc : ‚àÄ {A B C D} ‚Üí {f : Lens A B} {g : Lens B C} {h : Lens C D} ‚Üí ((h ‚àò‚Çö g) ‚àò‚Çö f) ‚â° (h ‚àò‚Çö (g ‚àò‚Çö f))
composeIsAssoc = refl
---------------------------------------

‚àò-resp-‚âà : {A B C : Polynomial} {f h : Lens B C} {g i : Lens A B} ‚Üí f ‚â° h ‚Üí g ‚â° i ‚Üí (f ‚àò‚Çö g) ‚â° (h ‚àò‚Çö i)
‚àò-resp-‚âà  p q ii = (p ii) ‚àò‚Çö (q ii)

fromFalseFunctionsEqual : {A : Type} (f : ‚ä• ‚Üí A) ‚Üí (g : ‚ä• ‚Üí A) ‚Üí f ‚â° g
fromFalseFunctionsEqual f g = funExt Œª {()}
 

------- Proofs related to uniqueness of lenses from and to certain polynomials
---------------------------------------
lensFromZeroUnique : {p : Polynomial} (f : Lens ùüò p) ‚Üí lensFromZero ‚â° f
lensFromZeroUnique f = lensesEqual3 (funExt Œª ()) Œª ()

lensToOneUnique : {p : Polynomial} (f : Lens p ùüô) ‚Üí  lensToOne ‚â° f
lensToOneUnique {p = p} f = lensesEqual3 refl Œª _ ()

---------------------------------------

------- Proofs related to plugging in 0
---------------------------------------
fromMapInDirectionToFunction : {p q : Polynomial} ‚Üí (Polynomial.position p ‚Üí Polynomial.position q) ‚Üí p ‚¶Ö ‚ä§ ‚¶Ü ‚Üí q ‚¶Ö ‚ä§ ‚¶Ü
fromMapInDirectionToFunction {p} {q} f = \x ‚Üí
  f (fst x) , Œª _ ‚Üí tt

fromFunctionToMapOnPositions : {p q : Polynomial} ‚Üí (p ‚¶Ö ‚ä§ ‚¶Ü ‚Üí q ‚¶Ö ‚ä§ ‚¶Ü) ‚Üí (Polynomial.position p ‚Üí Polynomial.position q)
fromFunctionToMapOnPositions {p@(mkpoly pos dir)} {q} f = \x ‚Üí let
  y : q ‚¶Ö ‚ä§ ‚¶Ü
  y = f (x , Œª x‚ÇÅ ‚Üí tt)
  in
  fst y

plugIn1IsoToMapPosition : {p q : Polynomial} ‚Üí Iso (p ‚¶Ö ‚ä§ ‚¶Ü ‚Üí q ‚¶Ö ‚ä§ ‚¶Ü) (Polynomial.position p ‚Üí Polynomial.position q)
plugIn1IsoToMapPosition = iso fromFunctionToMapOnPositions fromMapInDirectionToFunction (Œª b ‚Üí refl) (Œª a ‚Üí refl)

-- Proposition Not sure if this maybe is so similar
-- Proposition 3.40 in the book. (page 85)
enclosePoly‚â°depFuncToDirections : {p : Polynomial} ‚Üí enclose p ‚â° ((i : Polynomial.position p) ‚Üí Polynomial.direction p i)
enclosePoly‚â°depFuncToDirections = isoToPath isoEnclosePolydepFuncToDirections
  where

    isoEnclosePolydepFuncToDirections : {p : Polynomial} ‚Üí Iso (enclose p) ((i : Polynomial.position p) ‚Üí Polynomial.direction p i)
    isoEnclosePolydepFuncToDirections = iso toRight toLeft (Œª _ ‚Üí refl) (Œª _ ‚Üí refl)
      where
        toRight : {p : Polynomial} ‚Üí enclose p ‚Üí ((i : Polynomial.position p) ‚Üí Polynomial.direction p i)
        toRight (mapPosition ‚áÜ mapDirection) pos = mapDirection pos tt

        toLeft : {p : Polynomial} ‚Üí ((i : Polynomial.position p) ‚Üí Polynomial.direction p i) ‚Üí enclose p
        toLeft p‚ÇÅ = (Œª x ‚Üí tt) ‚áÜ Œª fromPos x ‚Üí p‚ÇÅ fromPos

---------------------------------------


------- Specific lens equalities
---------------------------------------
pwiseToExt : {A B : Set} {f g : A ‚Üí B} ‚Üí ({x : A} ‚Üí f x Eq.‚â° g x) ‚Üí f ‚â° g
pwiseToExt {A = A} {f = f} {g = g} p = let
  yaaa : {x : A} ‚Üí f x ‚â° g x
  yaaa = eqToPath p
  in
  funExt (Œª x ‚Üí yaaa)

positionLensesEqual : {A B : Polynomial} ‚Üí {f g : Lens A B} ‚Üí f ‚â° g ‚Üí Lens.mapPosition f ‚â° Lens.mapPosition g
positionLensesEqual p i = Lens.mapPosition (p i)

positionLensesEqualPwise : {A B : Polynomial} ‚Üí  {f g : Lens A B} {z : Polynomial.position A} ‚Üí f ‚â° g ‚Üí Lens.mapPosition f z ‚â° Lens.mapPosition g z
positionLensesEqualPwise {z = z} p i = let
  posEq = positionLensesEqual p i
  in posEq z

positionLensesEqualPwiseEq : {A B : Polynomial} {f g : Lens A B} ‚Üí
      f ‚â° g ‚Üí
      {x : Polynomial.position A} ‚Üí
      Lens.mapPosition f x Eq.‚â° Lens.mapPosition g x
positionLensesEqualPwiseEq p = pathToEq (positionLensesEqualPwise p)
--  
-- Proof that for any polynomal p with index set I, p(1) ‚â° I
-- Proposition 2.43 in the book
I‚â°pOfOne : {A : Polynomial} ‚Üí A ‚¶Ö ‚ä§ ‚¶Ü ‚â° Polynomial.position A
I‚â°pOfOne = isoToPath isoI‚â°pOfOne
  where
    isoI‚â°pOfOne : {A : Polynomial} ‚Üí Iso (A ‚¶Ö ‚ä§ ‚¶Ü) (Polynomial.position A)
    isoI‚â°pOfOne = iso toRight toLeft inv1 inv2
      where
        toRight : {A : Polynomial} ‚Üí  A ‚¶Ö ‚ä§ ‚¶Ü ‚Üí Polynomial.position A
        toRight = fst

        toLeft : {A : Polynomial} ‚Üí Polynomial.position A ‚Üí A ‚¶Ö ‚ä§ ‚¶Ü 
        toLeft x = x , Œª x‚ÇÅ ‚Üí tt

        inv1 = Œª b ‚Üí refl
        inv2 = Œª {(fst‚ÇÅ , snd‚ÇÅ) ‚Üí refl}

-- derivative : Polynomial ‚Üí Polynomial
-- derivative (mkpoly pos dir) = mkpoly (Œ£ pos dir) (Œª {(i , a) ‚Üí {! dir i - a  !}})

import Relation.Binary.PropositionalEquality as Eq


isConstant : Polynomial ‚Üí Type‚ÇÅ
isConstant (mkpoly pos dir) = (p : pos) ‚Üí dir p ‚â° ‚ä•


-- Exercise 4.1
constantClosedUnderPlus : {p q : Polynomial} ‚Üí isConstant p ‚Üí isConstant q ‚Üí isConstant (p + q)
constantClosedUnderPlus isConstantP isConstantQ (inj‚ÇÅ x) = isConstantP x
constantClosedUnderPlus isConstantP isConstantQ (inj‚ÇÇ y) = isConstantQ y

constantClosedUnderMult : {p q : Polynomial} ‚Üí isConstant p ‚Üí isConstant q ‚Üí isConstant (p * q)
constantClosedUnderMult isConstantP isConstantQ (posP , posQ) = lemma (isConstantP posP) (isConstantQ posQ)
  where
    lemma2 : {A B : Set} ‚Üí A Eq.‚â° ‚ä• ‚Üí B Eq.‚â° ‚ä• ‚Üí (A ‚äé B) ‚â° (‚ä• ‚äé ‚ä•)
    lemma2 Eq.refl Eq.refl = refl

    lemma : {A B : Set} ‚Üí A ‚â° ‚ä• ‚Üí B ‚â° ‚ä• ‚Üí (A ‚äé B) ‚â° ‚ä•
    lemma {A = A} {B = B} p‚ÇÅ p‚ÇÇ = lemma2 (pathToEq p‚ÇÅ) (pathToEq p‚ÇÇ) ‚àô isoToPath (iso (Œª { (inj‚ÇÅ ()) ; (inj‚ÇÇ ()) }) (Œª ()) (Œª () ) (Œª { (inj‚ÇÅ ()) ; (inj‚ÇÇ ()) }))

isLinear : Polynomial ‚Üí Type‚ÇÅ
isLinear (mkpoly pos dir) = (p : pos) ‚Üí dir p ‚â° ‚ä§

linearClosedUnderPlus : {p q : Polynomial} ‚Üí isLinear p ‚Üí isLinear q ‚Üí isLinear (p + q)
linearClosedUnderPlus isLinearP isLinearQ (inj‚ÇÅ x) = isLinearP x
linearClosedUnderPlus isLinearP isLinearQ (inj‚ÇÇ y) = isLinearQ y

isMonomial : Polynomial ‚Üí Type‚ÇÅ
isMonomial (mkpoly pos dir) = ‚àÄ {p‚ÇÅ : pos} {p‚ÇÇ : pos} ‚Üí dir p‚ÇÅ ‚â° dir p‚ÇÇ

isMonomialŒ£ : Polynomial ‚Üí Type‚ÇÅ
isMonomialŒ£ (mkpoly pos dir) = Œ£[ A ‚àà Set ] ({p : pos} ‚Üí dir p ‚â° A)   -- ‚àÄ {p‚ÇÅ : pos} {p‚ÇÇ : pos} ‚Üí dir p‚ÇÅ ‚â° dir p‚ÇÇ

-- equalProofs : {p : Polynomial} ‚Üí isMonomial p ‚â° isMonomialŒ£ p
-- equalProofs {mkpoly pos dir} = {!   !} -- isoToPath (iso (Œª x ‚Üí _ , Œª {po} ‚Üí {!   !}) {!   !} {!   !} {!   !})

monomialClosedUnderMult : {p q : Polynomial} ‚Üí isMonomial p ‚Üí isMonomial q ‚Üí isMonomial (p * q)
monomialClosedUnderMult isMonP isMonQ {posp‚ÇÅ , posq‚ÇÅ} {posp‚ÇÇ , posq‚ÇÇ} = cong (Œª { (a , b) ‚Üí a ‚äé b }) (Œ£PathP (leftEqual , rightEqual))
  where leftEqual = isMonP {posp‚ÇÅ} {posp‚ÇÇ}
        rightEqual = isMonQ {posq‚ÇÅ} {posq‚ÇÇ}

-- yoyo : {p q r : Polynomial} ‚Üí (p + q) ‚óÇ r ‚â° (p ‚óÇ r) + (q ‚óÇ r)
-- yoyo {p} {q} {r} = poly‚â°‚àÄ pos‚â° Œª {(inj‚ÇÅ x) ‚Üí {! cong (Œª y ‚Üí Œ£ (direction p (proj‚ÇÅ x)) y) ?   !}
--                                 ; (inj‚ÇÇ y) ‚Üí {!   !}}
--   where
--     pos‚â° : Œ£ (position p ‚äé position q)
--         (Œª i ‚Üí [ direction p , direction q ] i ‚Üí position r)
--         ‚â°
--         (Œ£ (position p) (Œª i ‚Üí direction p i ‚Üí position r) ‚äé
--         Œ£ (position q) (Œª i ‚Üí direction q i ‚Üí position r))
--     pos‚â° = isoToPath (iso (Œª {(inj‚ÇÅ x , snd‚ÇÅ) ‚Üí inj‚ÇÅ (x , snd‚ÇÅ)
--                             ; (inj‚ÇÇ y , snd‚ÇÅ) ‚Üí inj‚ÇÇ (y , snd‚ÇÅ)}) (Œª {(inj‚ÇÅ (fst‚ÇÅ , snd‚ÇÅ)) ‚Üí inj‚ÇÅ fst‚ÇÅ , snd‚ÇÅ
--                                                                     ; (inj‚ÇÇ y) ‚Üí inj‚ÇÇ (proj‚ÇÅ y) , snd y}) (Œª {(inj‚ÇÅ x) ‚Üí refl
--                                                                                                             ; (inj‚ÇÇ y) ‚Üí refl}) Œª {(inj‚ÇÅ x , snd‚ÇÅ) ‚Üí refl
--                                                                                                                                  ; (inj‚ÇÇ y , snd‚ÇÅ) ‚Üí refl})
    -- dir‚â° : subst (Œª x ‚Üí x ‚Üí Type) pos‚â°
    --   (direction (p + q) ‚óÇ r)
    --   ‚â° [ direction (p ‚óÇ r) , direction (q ‚óÇ r) ]
    -- dir‚â° = ?

lensToYIsChoiceOfDirection : {p : Polynomial} ‚Üí Lens p Y ‚â° ((pos : position p) ‚Üí direction p pos)
lensToYIsChoiceOfDirection {p} = isoToPath (iso (Œª { (_ ‚áÜ md) pos ‚Üí md pos tt} )
                                                 (Œª { mapSelfDir ‚Üí const tt ‚áÜ Œª fromPos _ ‚Üí mapSelfDir fromPos}) 
                                                 (Œª b ‚Üí refl) 
                                                 (Œª { (mp ‚áÜ md) ‚Üí Œª _ ‚Üí const tt ‚áÜ md }) )   

open import Data.Fin renaming (zero to z ; suc to s)
open import Data.Bool

ex‚¶Ö2‚¶Ü‚â°4 : ex ‚¶Ö Bool ‚¶Ü ‚â° Fin 6
ex‚¶Ö2‚¶Ü‚â°4 = isoToPath $
  iso go 
      back
      sec
      ret
    where go : ex ‚¶Ö Bool ‚¶Ü ‚Üí Fin 6
          go (false , fromboo) with fromboo false | fromboo true
          ... | false | false = z
          ... | true  | false = s z
          ... | false | true  = s (s z)
          ... | true  | true  = s (s (s z))
          go (true , fromboo) with fromboo tt
          ... | false         = s (s (s (s z)))
          ... | true          = s (s (s (s (s z))))
          back : Fin 6 ‚Üí ex ‚¶Ö Bool ‚¶Ü
          back z                     = false , Œª { false ‚Üí false ; true ‚Üí false }
          back (s z)                 = false , Œª { false ‚Üí true ; true ‚Üí false }
          back (s (s z))             = false , Œª { false ‚Üí false ; true ‚Üí true }
          back (s (s (s z)))         = false , Œª { false ‚Üí true ; true ‚Üí true }
          back (s (s (s (s z))))     = true ,  Œª { tt ‚Üí false }
          back (s (s (s (s (s z))))) = true ,  Œª { tt ‚Üí true }
          sec : section go back
          sec z                     = refl
          sec (s z)                 = refl
          sec (s (s z))             = refl
          sec (s (s (s z)))         = refl
          sec (s (s (s (s z))))     = refl
          sec (s (s (s (s (s z))))) = refl
          ret : retract go back
          ret (false , fromboo) with fromboo false in eq | fromboo true in eq2
          ... | false | false = Œ£PathP (refl , funExt (Œª { false ‚Üí eqToPath (Eq.sym eq) ; true ‚Üí eqToPath (Eq.sym eq2)} ))
          ... | true  | false = Œ£PathP (refl , funExt (Œª { false ‚Üí eqToPath (Eq.sym eq) ; true ‚Üí eqToPath (Eq.sym eq2)} ))
          ... | false | true  = Œ£PathP (refl , funExt (Œª { false ‚Üí eqToPath (Eq.sym eq) ; true ‚Üí eqToPath (Eq.sym eq2)} ))
          ... | true  | true  = Œ£PathP (refl , funExt (Œª { false ‚Üí eqToPath (Eq.sym eq) ; true ‚Üí eqToPath (Eq.sym eq2)} ))
          ret (true , fromboo) with fromboo tt in eq
          ... | false         = Œ£PathP (refl , funExt (Œª { tt ‚Üí eqToPath (Eq.sym eq) } ))
          ... | true          = Œ£PathP (refl , funExt (Œª { tt ‚Üí eqToPath (Eq.sym eq) } ))