{-# OPTIONS --allow-unsolved-metas #-}

-- This module contains an attempt at doing matrix operations purely in Agda.
-- It is not used in the dynamical systems we operate on because these operations
-- are too slow, especially LUP decomposition and matrix inversion.

module Dynamical.Matrix.Operations.Experimental where

open import Dynamical.Matrix.Core
open import Dynamical.Matrix.Operations.Basic
open import Data.Nat using (‚Ñï ; _‚à∏_  ; suc ) renaming (_+_ to _+‚Ñï_)
open import Data.Float renaming (Float to ‚Ñù ; from‚Ñï to from‚ÑïtoFloat) using (_√∑_ ; _-_ )
import Data.Float as Float
import Data.Nat as Nat using (_‚âü_)
open import Data.Fin using (_‚âü_ ; from‚Ñï ; Fin ; from‚Ñï< ; to‚Ñï)
import Data.Fin as Fin
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Data.Vec using (Vec ; tabulate ; zipWith ; _‚à∑_ ; transpose ; [_] ; lookup ; [] )
import Data.Vec as Vec
open import Data.List using (List ; [] ; _‚à∑_)
open import Function
open import Data.Bool using (if_then_else_ ; Bool ; true ; false)
open import Data.Maybe using (Maybe ; just ; nothing)
open import Data.List.Extrema
open import Relation.Binary.PropositionalEquality using (_‚â°_ ; refl)
open import Data.Product using (_√ó_ ; _,_ ; proj‚ÇÅ ; proj‚ÇÇ)

maxIdx : ‚àÄ {A n} {{numA : Num A A A}} ‚Üí Vec A (suc n) ‚Üí Fin (suc n)
maxIdx {A} {n} {{numA = numA}} v = proj‚ÇÅ biggest
  where indicesAndValues : Vec (Fin (suc n) √ó A) (suc n)
        indicesAndValues = Vec.zip (Vec.allFin (suc n)) v
        step : Fin (suc n) √ó A ‚Üí Fin (suc n) √ó A ‚Üí Fin (suc n) √ó A
        step (biggestSoFarIndex , biggestSoFarValue) (curIndex , curValue) = 
          if Num._‚â§_ numA biggestSoFarValue curValue 
            then curIndex , curValue 
            else biggestSoFarIndex , biggestSoFarValue
        biggest = Vec.foldl‚ÇÅ step indicesAndValues

sumPositiveProof : ‚àÄ {k y} ‚Üí k Nat.< k +‚Ñï suc y
sumPositiveProof {Nat.zero} {y} = Nat.s‚â§s Nat.z‚â§n
sumPositiveProof {suc k} {y} = Nat.s‚â§s sumPositiveProof

currentSubColumn : ‚àÄ {A y} ‚Üí {{numA : Num A A A}} ‚Üí let n = suc y in (k : ‚Ñï) ‚Üí  Matrix A (k +‚Ñï n) (k +‚Ñï n) ‚Üí Vec A n
currentSubColumn k (ùïÑ m) = let
  m·µÄ = Vec.transpose m
  currCol = Vec.lookup m·µÄ (Fin.from‚Ñï< {k} sumPositiveProof)
  in
  Vec.drop k currCol

mat : ‚àÄ {A : Set} {a‚ÇÅ‚ÇÅ a‚ÇÅ‚ÇÇ a‚ÇÅ‚ÇÉ a‚ÇÇ‚ÇÅ a‚ÇÇ‚ÇÇ a‚ÇÇ‚ÇÉ a‚ÇÉ‚ÇÅ a‚ÇÉ‚ÇÇ a‚ÇÉ‚ÇÉ : A}‚Üí Matrix A 3 3
mat {_} {a‚ÇÅ‚ÇÅ} {a‚ÇÅ‚ÇÇ} {a‚ÇÅ‚ÇÉ} {a‚ÇÇ‚ÇÅ} {a‚ÇÇ‚ÇÇ} {a‚ÇÇ‚ÇÉ} {a‚ÇÉ‚ÇÅ} {a‚ÇÉ‚ÇÇ} {a‚ÇÉ‚ÇÉ} = ùïÑ $ 
  (a‚ÇÅ‚ÇÅ ‚à∑  a‚ÇÅ‚ÇÇ ‚à∑  a‚ÇÅ‚ÇÉ ‚à∑ []) ‚à∑ 
  (a‚ÇÇ‚ÇÅ ‚à∑  a‚ÇÇ‚ÇÇ ‚à∑  a‚ÇÇ‚ÇÉ ‚à∑ []) ‚à∑ 
  (a‚ÇÉ‚ÇÅ ‚à∑  a‚ÇÉ‚ÇÇ ‚à∑  a‚ÇÉ‚ÇÉ ‚à∑ []) ‚à∑ []

hmm = maxIdx $ currentSubColumn 0 $ mat {‚Ñù} {4.0} {3.0} { -1.0} {5.0} {3.0} {2.0} {2.0} {1.0} {3.0}


toVecOfSum : ‚àÄ {A : Set} {k y} ‚Üí {p : k Nat.< (suc y)} ‚Üí Vec A (suc y) ‚Üí Vec A (k +‚Ñï suc (y ‚à∏ k))
toVecOfSum {k = Nat.zero} {p = Nat.s‚â§s Nat.z‚â§n} v = v
toVecOfSum {k = suc m} {p = Nat.s‚â§s (Nat.s‚â§s p)} (x ‚à∑ v) = x ‚à∑ (toVecOfSum {k = m} {p = (Nat.s‚â§s p)} v)


toMatrixOfSum : ‚àÄ {A : Set} {k y} ‚Üí {p : k Nat.< (suc y)} ‚Üí Matrix A (suc y) (suc y) ‚Üí Matrix A (k +‚Ñï suc (y ‚à∏ k)) (k +‚Ñï suc (y ‚à∏ k))
toMatrixOfSum {p = p} (ùïÑ v) = ùïÑ $ toVecOfSum {p = p} (Vec.map (toVecOfSum {p = p}) v)

toN< : {n : ‚Ñï} ‚Üí {k : Fin (suc n)} ‚Üí to‚Ñï k Nat.< suc n
toN< {Nat.zero} {Fin.zero} = Nat.s‚â§s Nat.z‚â§n
toN< {suc n} {Fin.zero} = Nat.s‚â§s Nat.z‚â§n
toN< {suc n} {Fin.suc k} = Nat.s‚â§s toN<


pr : ‚àÄ {n} (k : Fin (suc n)) (maxind : Fin (suc (n ‚à∏ to‚Ñï k))) ‚Üí to‚Ñï k +‚Ñï to‚Ñï maxind Nat.< suc n
pr {n} Fin.zero Fin.zero = Nat.s‚â§s Nat.z‚â§n
pr {suc n} Fin.zero (Fin.suc maxind) = Nat.s‚â§s (pr Fin.zero maxind )
pr {suc n} (Fin.suc k) maxind = Nat.s‚â§s (pr k maxind)

addBack : ‚àÄ {n} ‚Üí (k : Fin (suc n)) ‚Üí Fin (suc (n ‚à∏ to‚Ñï k)) ‚Üí Fin (suc n)
addBack k maxind = from‚Ñï< {(to‚Ñï k +‚Ñï to‚Ñï maxind)} (pr k maxind)
findPivot : ‚àÄ {A n} {{numA : Num A A A}} ‚Üí Matrix A (suc n) (suc n) ‚Üí Fin (suc n) ‚Üí Fin (suc n)
findPivot {A} {n} m k = let
  curSubCol = currentSubColumn (to‚Ñï k) (toMatrixOfSum {A} {k = to‚Ñï k} {y = n} {p = toN< {n} {k}} m)
  maxInd = maxIdx curSubCol
  in
  addBack k maxInd

hm = findPivot (mat {‚Ñù} 
   {16.0} {3.0} { 17.0} 
   {5.0} {3.0} {2.0} 
   {2.0} {4.0} {3.0}
   ) (Fin.suc Fin.zero)

swapRows : ‚àÄ {A} ‚Üí {n m : ‚Ñï} ‚Üí Fin n ‚Üí Fin n ‚Üí Matrix A n m ‚Üí Matrix A n m
swapRows i j mat@(ùïÑ m) = ùïÑ (Vec.updateAt i (Œª _ ‚Üí lookup m j) (Vec.updateAt j (Œª _ ‚Üí lookup m i) m))

swapRowsWorks : ‚àÄ {A : Set} {one two thr : A} ‚Üí swapRows Fin.zero (Fin.suc Fin.zero) 
  (ùïÑ $
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  ) ‚â°
  (ùïÑ $
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  )
swapRowsWorks = refl

-- LU decomposition
record LUP (A : Set) (n : ‚Ñï) : Set where
  constructor MkLUP
  field
    L : Matrix A n n
    U : Matrix A n n
    P : Matrix A n n

luDecomposition : ‚àÄ {A} {{numA : Num A A A}} {n : ‚Ñï} ‚Üí Matrix A (suc n) (suc n) ‚Üí LUP A (suc n)
luDecomposition {A = A} {n = n} (ùïÑ m) = fromAccType $ Vec.foldl (Œª _ ‚Üí AccType) step initLUP (Vec.allFin (suc n))
  where AccType : Set
        AccType = Matrix A (suc n) (suc n) √ó LUP A (suc n)
        fromAccType : AccType ‚Üí LUP A (suc n)
        fromAccType = proj‚ÇÇ
        initLUP : AccType
        initLUP = ùïÑ m , MkLUP eye zeros eye
        step : AccType ‚Üí Fin (suc n) ‚Üí AccType
        step (mat@(ùïÑ v) , MkLUP L U P) ind = newA ,  MkLUP L' U' P'
          where pivot = findPivot mat ind
                swappedA : Matrix A (suc n) (suc n)
                swappedA = swapRows ind pivot mat
                L' : Matrix A (suc n) (suc n)
                L' = {!   !}
                newA : Matrix A (suc n) (suc n)
                newA = {!   !}
                U' : Matrix A (suc n) (suc n)
                U' = {!   !}
                P' : Matrix A (suc n) (suc n)
                P' = swapRows ind pivot P

