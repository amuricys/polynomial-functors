module Dynamical.Matrix.Operations.Basic where

open import Dynamical.Matrix.Core

open import Data.Nat using (‚Ñï ; _‚à∏_  ; suc ) renaming (_+_ to _+‚Ñï_)
open import Data.Float renaming (Float to ‚Ñù ; from‚Ñï to from‚ÑïtoFloat) using (_√∑_ ; _-_ )
open import Data.Fin using (_‚âü_ ; from‚Ñï ; Fin ; from‚Ñï< ; to‚Ñï)
import Data.Fin as Fin
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Data.Vec using (Vec ; tabulate ; zipWith ; _‚à∑_ ; transpose ; [_] ; lookup ; [] )
import Data.Vec as Vec
open import Data.List using (List ; [] ; _‚à∑_)
open import Function
open import Data.Bool using (if_then_else_ ; Bool ; true ; false)
open import Data.Maybe using (Maybe ; just ; nothing)
open import Data.List.Extrema
open import Relation.Binary.PropositionalEquality using (_‚â°_ ; refl)
open import Data.Product using (_√ó_ ; _,_ ; proj‚ÇÅ ; proj‚ÇÇ)

open Num {{...}}


_+·¥π_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Matrix A r c ‚Üí Matrix A r c
_+·¥π_ {{numA = numA}} (record { values = m‚ÇÅ }) (record { values = m‚ÇÇ }) =
  record { values = zipWith (zipWith _+_) m‚ÇÅ m‚ÇÇ }
infixl 29 _+·¥π_

_+‚±Ω_ : ‚àÄ {A n} {{numA : Num A A A}} ‚Üí Vec A n ‚Üí Vec A n ‚Üí Vec A n
_+‚±Ω_ {{numA = numA}} = zipWith _+_
infixl 29 _+‚±Ω_

_*·¥πÀ¢_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí A ‚Üí Matrix A r c
_*·¥πÀ¢_ {{numA = numA}} (record { values = m }) a = record { values = Vec.map (Vec.map (a *_)) m }
infixl 31 _*·¥πÀ¢_

_*À¢·¥π_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí A ‚Üí Matrix A r c ‚Üí Matrix A r c
_*À¢·¥π_ = flip _*·¥πÀ¢_
infixl 31 _*À¢·¥π_

_*·¥π_ : ‚àÄ {A r c p} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Matrix A c p ‚Üí Matrix A r p
_*·¥π_ {A = A} {p = p} {{numA = numA}} (record { values = m‚ÇÅ }) (record { values = m‚ÇÇ }) =
  record { values = Vec.map (Œª row ‚Üí Vec.map (Œª col ‚Üí sum (zipWith _*_ row col)) (transpose m‚ÇÇ)) m‚ÇÅ }
  where
    sum : {a : ‚Ñï} ‚Üí Vec A a ‚Üí A
    sum [] = zero
    sum (x ‚à∑ xs) = x + (sum xs)
infixl 30 _*·¥π_

vecToColumnMatrix : ‚àÄ {A} {n : ‚Ñï} ‚Üí Vec A n ‚Üí Matrix A n 1
vecToColumnMatrix v = ùïÑ (Vec.map (Œª x ‚Üí [ x ]) v)

vecToRowMatrix : ‚àÄ {A} {n : ‚Ñï} ‚Üí Vec A n ‚Üí Matrix A 1 n
vecToRowMatrix v = ùïÑ [ v ]

_·µÄ : ‚àÄ {A r c} ‚Üí Matrix A r c ‚Üí Matrix A c r
(ùïÑ m) ·µÄ = ùïÑ (transpose m)
infixl 45 _·µÄ

transposeWorks : ‚àÄ {A : Set} {one two thr : A} ‚Üí _·µÄ
  (ùïÑ $
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  ) ‚â°
  (ùïÑ $
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑ []
  )
transposeWorks = refl

map : ‚àÄ {A B r c} ‚Üí (A ‚Üí B) ‚Üí Matrix A r c ‚Üí Matrix B r c
map f (ùïÑ v) = ùïÑ (Vec.map (Vec.map f) v)

rowMatrixToVec : ‚àÄ {A} {n : ‚Ñï} ‚Üí Matrix A 1 n ‚Üí Vec A n
rowMatrixToVec (ùïÑ (v ‚à∑ [])) = v

columnMatrixToVec : ‚àÄ {A} {n : ‚Ñï} ‚Üí Matrix A n 1 ‚Üí Vec A n
columnMatrixToVec m = rowMatrixToVec (m ·µÄ)

_*·¥π‚±Ω_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Vec A c ‚Üí Vec A r
m *·¥π‚±Ω v = columnMatrixToVec (m *·¥π vecToColumnMatrix v)
infixl 31 _*·¥π‚±Ω_

_*‚±Ω·¥π_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Vec A c ‚Üí  Matrix A r c ‚Üí Vec A r
_*‚±Ω·¥π_ = flip _*·¥π‚±Ω_
infixl 31 _*‚±Ω·¥π_


replicate : ‚àÄ {A} ‚Üí {r c : ‚Ñï} ‚Üí A ‚Üí Matrix A r c
replicate = ùïÑ ‚àò Vec.replicate ‚àò Vec.replicate

zeros : ‚àÄ {A} ‚Üí {r c : ‚Ñï} ‚Üí {{numA : Num A A A}} ‚Üí Matrix A r c
zeros = replicate zero

eye : ‚àÄ {A} {n : ‚Ñï} {{numA : Num A A A}} ‚Üí Matrix A n n
eye  {n = n} {{numA = numA}} = ùïÑ (tabulate Œª i ‚Üí tabulate Œª j ‚Üí if ‚åä i ‚âü j ‚åã then one else zero)
