{-# OPTIONS --allow-unsolved-metas  #-}
module Dynamical.Matrix.Core where

open import Data.Nat using (‚Ñï ; _‚à∏_  ; suc ) renaming (_+_ to _+‚Ñï_)
open import Data.Float renaming (Float to ‚Ñù ; from‚Ñï to from‚ÑïtoFloat) using (_√∑_ ; _-_ )
import Data.Float as Float
import Data.Nat as Nat using (_‚âü_)
open import Data.Fin using (_‚âü_ ; from‚Ñï ; Fin ; from‚Ñï< ; to‚Ñï)
import Data.Fin as Fin
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Data.Vec using (Vec ; tabulate ; zipWith ; _‚à∑_ ; transpose ; [_] ; lookup ; [] )
import Data.Vec as Vec
open import Data.List using (List ; [] ; _‚à∑_)
open import Function
open import Data.Bool using (if_then_else_ ; Bool ; true ; false)
open import Data.Maybe using (Maybe ; just ; nothing)
open import Data.List.Extrema
open import Relation.Binary.PropositionalEquality using (_‚â°_ ; refl)
open import Data.Product using (_√ó_ ; _,_ ; proj‚ÇÅ ; proj‚ÇÇ)


record Matrix (A : Set) (rows cols : ‚Ñï) : Set where
  constructor ùïÑ
  field
    values : Vec (Vec A cols) rows
open Matrix

record Num (A B C : Set) : Set where
  field
    _+_ : A ‚Üí B ‚Üí C
    _*_ : A ‚Üí B ‚Üí C
    
    zero : C
    one : C
    _eq_ : C ‚Üí C ‚Üí Bool
    
    _‚â§_ : C ‚Üí C ‚Üí Bool
  infixl 19 _‚â§_
  infixl 19 _eq_
  infixl 20 _+_
  infixl 21 _*_

open Num {{...}}

num‚Ñï‚Ñù‚Ñù : Num ‚Ñï ‚Ñù ‚Ñù
Num._+_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí from‚ÑïtoFloat n Float.+ x
Num._*_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí from‚ÑïtoFloat n Float.* x
Num.zero num‚Ñï‚Ñù‚Ñù = 0.0
Num.one num‚Ñï‚Ñù‚Ñù = 1.0
Num._eq_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñï‚Ñù‚Ñù = Float._‚â§·µá_

num‚Ñù‚Ñï‚Ñù : Num ‚Ñù ‚Ñï ‚Ñù
Num._+_ num‚Ñù‚Ñï‚Ñù = Œª x n ‚Üí x Float.+ from‚ÑïtoFloat n
Num._*_ num‚Ñù‚Ñï‚Ñù = Œª x n ‚Üí x Float.* from‚ÑïtoFloat n
Num.zero num‚Ñù‚Ñï‚Ñù = 0.0
Num.one num‚Ñù‚Ñï‚Ñù = 1.0
Num._eq_ num‚Ñù‚Ñï‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñù‚Ñï‚Ñù = Float._‚â§·µá_

num‚Ñù‚Ñù‚Ñù : Num ‚Ñù ‚Ñù ‚Ñù
Num._+_ num‚Ñù‚Ñù‚Ñù = Œª x n ‚Üí x Float.+ n
Num._*_ num‚Ñù‚Ñù‚Ñù = Œª x n ‚Üí x Float.* n
Num.zero num‚Ñù‚Ñù‚Ñù = 0.0
Num.one num‚Ñù‚Ñù‚Ñù = 1.0
Num._eq_ num‚Ñù‚Ñù‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñù‚Ñù‚Ñù = Float._‚â§·µá_

instance
  num‚Ñù‚Ñù‚ÑùInstance : Num ‚Ñù ‚Ñù ‚Ñù
  num‚Ñù‚Ñù‚ÑùInstance = num‚Ñù‚Ñù‚Ñù
