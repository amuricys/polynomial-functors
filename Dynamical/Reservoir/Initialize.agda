{-# OPTIONS --sized-types --guardedness #-}

module Dynamical.Reservoir.Initialize where

open import Data.Float
import IO.Primitive as Prim
open import IO
open import Dynamical.Matrix.Everything
open import Data.Nat hiding (_*_)
open import Data.Vec hiding (_>>=_)
open import Dynamical.Reservoir.State


postulate primRandom : Prim.IO Float
{-# FOREIGN GHC import qualified System.Random as Random #-}
{-# COMPILE GHC primRandom = Random.randomIO #-}

random : IO Float
random = lift primRandom

postulate primNormal : Prim.IO Float
{-# FOREIGN GHC import qualified Data.Random.Normal as Normal #-}
{-# COMPILE GHC primNormal = Normal.normalIO #-}

normal : Float ‚Üí IO Float
normal factor = do
  x ‚Üê lift primNormal 
  pure (factor * x)

randomVec : (cols : ‚Ñï) ‚Üí IO (Vec Float cols)
randomVec zero = pure []
randomVec (suc n) = do
  x ‚Üê random
  (Œª k ‚Üí x ‚à∑ k ) <$> randomVec n

randomMatrix : (rows : ‚Ñï) ‚Üí (cols : ‚Ñï) ‚Üí IO (Matrix Float rows cols)
randomMatrix rows cols = ùïÑ <$> rowTimes rows (randomVec cols) where
  rowTimes : (rows : ‚Ñï) ‚Üí IO (Vec Float cols) ‚Üí IO (Vec (Vec Float cols) rows)
  rowTimes zero _ = pure []
  rowTimes (suc n) rowGenerator = do
    row ‚Üê rowGenerator
    (Œª k ‚Üí row ‚à∑ k ) <$> rowTimes n rowGenerator

normalVec : (factor : Float) (cols : ‚Ñï) ‚Üí IO (Vec Float cols)
normalVec factor zero = pure []
normalVec factor (suc n) = do
  x ‚Üê normal factor
  (Œª k ‚Üí x ‚à∑ k ) <$> normalVec factor n

normalMatrix : (factor : Float) (rows : ‚Ñï) ‚Üí (cols : ‚Ñï) ‚Üí IO (Matrix Float rows cols)
normalMatrix factor rows cols = ùïÑ <$> rowTimes rows (normalVec factor cols) where
  rowTimes : (rows : ‚Ñï) ‚Üí IO (Vec Float cols) ‚Üí IO (Vec (Vec Float cols) rows)
  rowTimes zero _ = pure []
  rowTimes (suc n) rowGenerator = do
    row ‚Üê rowGenerator
    (Œª k ‚Üí row ‚à∑ k ) <$> rowTimes n rowGenerator

initInputWeights : (factor : Float) (numNodes systemDim : ‚Ñï) ‚Üí IO (InputWeights numNodes systemDim)
initInputWeights factor n s = do
  input ‚Üê normalMatrix factor n s
  pure input

initReservoirWeights : (factor : Float) (numNodes : ‚Ñï) ‚Üí IO (ReservoirWeights numNodes)
initReservoirWeights factor n = do
  res ‚Üê normalMatrix factor n n
  pure res
