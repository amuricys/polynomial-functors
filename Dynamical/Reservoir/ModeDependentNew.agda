{-# OPTIONS --sized-types --guardedness #-}

module Dynamical.Reservoir.ModeDependentNew where

open import Dynamical.System
open import Data.Product using (_√ó_; _,_)
open import Data.Sum
open import Data.Unit
open import Data.Nat renaming (_+_ to _+‚Ñï_ ; _‚à∏_ to _-‚Ñï_)
open import Data.Float renaming (Float to ‚Ñù; tanh to tanh1; show to showf) hiding (‚åä_‚åã)
open import CategoryData.Everything renaming (_*_ to _*p_ ; _+_ to _+p_; Y to Y')
open import Codata.Stream using (Stream ; take ; drop)
open import Dynamical.Matrix.Everything as Matrix using (Matrix ; _*‚±Ω·¥π_ ; _*·¥π‚±Ω_ ; _*·¥π_ ; _+·¥π_ ; _+‚±Ω_ ; _·µÄ ; _‚Åª¬π ; _*À¢·¥π_ ; eye)
open import Dynamical.Reservoir.StateNew
open import Dynamical.Lorenz as Lorenz
open import Data.Vec as Vec using (Vec ; map ; _‚à∑_ ; [])
open import Data.Bool using (if_then_else_ ; Bool)
open import Data.List using (List ; reverse)
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Function
open import Level
open DynamicalSystem renaming (interface to interface‚Çö)
open ReservoirState
open import Data.Bool

import Category.Monad.Reader
open import Category.Monad

is-< : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
is-< a b = ‚åä a Data.Nat.<? b ‚åã

is-‚â° : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
is-‚â° a b = ‚åä a Data.Nat.‚âü b ‚åã

tanh : ‚àÄ {m n} ‚Üí Matrix ‚Ñù m n ‚Üí Matrix ‚Ñù m n
tanh = Matrix.map tanh1

open import Data.String
postulate trace : ‚àÄ {A : Set} ‚Üí String ‚Üí A ‚Üí A
{-# FOREIGN GHC
  import Debug.Trace
  import Data.Text

  myTrace :: Text -> a -> a
  myTrace str a = trace (unpack str) a
#-}
{-# COMPILE GHC trace = \_ -> myTrace #-}

data ReservoirOutput (systemDim : ‚Ñï) : Set where
    stillColl : ReservoirOutput systemDim
    stillTouch : ReservoirOutput systemDim
    predicting : Vec ‚Ñù systemDim ‚Üí ReservoirOutput systemDim

activate : {numNodes systemDim : ‚Ñï} (inputWeights : InputWeights numNodes systemDim) (reservoirWeights : ReservoirWeights numNodes) ‚Üí (nodeStates : Vec ‚Ñù numNodes) (inputSequence : Vec ‚Ñù systemDim) ‚Üí Vec ‚Ñù numNodes
activate {numNodes} {systemDim} inputWeights reservoirWeights nodeStates inputSequence = reservoirActivations
  where inputDynamic : Vec ‚Ñù numNodes
        inputDynamic = inputWeights *·¥π‚±Ω inputSequence
        newReservoirStates : Vec ‚Ñù numNodes
        newReservoirStates = reservoirWeights *·¥π‚±Ω nodeStates
        reservoirActivations : Vec ‚Ñù numNodes
        reservoirActivations = Vec.map tanh1 (newReservoirStates +‚±Ω inputDynamic)

reservoir : (numNodes systemDim trainingSteps touchingSteps : ‚Ñï)  (inputWeights : InputWeights numNodes systemDim) (reservoirWeights : ReservoirWeights numNodes) ‚Üí DynamicalSystem
reservoir numNodes systemDim trainingSteps touchingSteps inputWeights reservoirWeights = mkdyn (ReservoirState numNodes systemDim) interface (readout ‚áÜ update)
  where interface : Polynomial
        interface = monomial (ReservoirOutput systemDim) (Vec ‚Ñù systemDim)
        readout : ReservoirState numNodes systemDim ‚Üí ReservoirOutput systemDim
        readout (Coll nodeStates counter statesHistory systemHistory) = stillColl
        readout (Touch nodeStates counter outputWeights) = stillTouch
        readout (Go nodeStates outputWeights) = predicting (outputWeights ·µÄ *·¥π‚±Ω nodeStates) 
        update : ReservoirState numNodes systemDim ‚Üí Vec ‚Ñù systemDim ‚Üí ReservoirState numNodes systemDim
        update (Coll nodeStates counter statesHistory systemHistory) inputSequence = 
            if is-< counter trainingSteps then keepCollecting else trainThenTouch
              where keepCollecting : ReservoirState numNodes systemDim
                    keepCollecting = Coll newStates (1 +‚Ñï counter) (nodeStates ‚à∑ statesHistory) (inputSequence ‚à∑ systemHistory)
                      where newStates : Vec ‚Ñù numNodes 
                            newStates = activate inputWeights reservoirWeights nodeStates inputSequence
                    trainThenTouch : ReservoirState numNodes systemDim
                    trainThenTouch = Touch (Vec.replicate 0.0) 0 trainedOutputWeights
                      where ridge = 0.01
                            statesHist : Matrix ‚Ñù counter numNodes
                            statesHist = Matrix.ùïÑ $ Vec.reverse statesHistory
                            systemHist : Matrix ‚Ñù counter systemDim
                            systemHist = Matrix.ùïÑ $ Vec.reverse systemHistory
                            trainedOutputWeights : OutputWeights numNodes systemDim
                            trainedOutputWeights = (statesHist ·µÄ *·¥π statesHist +·¥π ridge *À¢·¥π eye)‚Åª¬π *·¥π (statesHist ·µÄ *·¥π systemHist)
        update (Touch nodeStates counter outputWeights) inputSequence =
            if is-< counter (touchingSteps -‚Ñï 1) then keepTouching else go -- minus 1 because one step is transitionary
              where keepTouching : ReservoirState numNodes systemDim
                    keepTouching = Touch (activate inputWeights reservoirWeights nodeStates inputSequence) (1 +‚Ñï counter) outputWeights
                    go : ReservoirState numNodes systemDim
                    go = Go (activate inputWeights reservoirWeights nodeStates inputSequence)
                            outputWeights
        update ro@(Go nodeStates outputWeights) inputSequence =
            Go newNodeStates outputWeights
          where reservoirDynamic : Vec ‚Ñù numNodes
                reservoirDynamic = reservoirWeights *·¥π‚±Ω nodeStates
                out : Vec ‚Ñù systemDim
                out = outputWeights ·µÄ *·¥π‚±Ω nodeStates
                inputDynamic : Vec ‚Ñù numNodes
                inputDynamic = inputWeights *·¥π‚±Ω out
                newNodeStates = Vec.map tanh1 (reservoirDynamic +‚±Ω inputDynamic)
                

preLorRes : (numNodes trainingSteps touchSteps : ‚Ñï) ‚Üí (dt : ‚Ñù) ‚Üí InputWeights numNodes 3 ‚Üí ReservoirWeights numNodes ‚Üí DynamicalSystem
preLorRes numNodes trainingSteps touchSteps dt inputWeights reservoirWeights = 
  -- Training system
  lorenz dt &&& 
  -- Test system
  lorenz dt &&&
  -- Reservoir of dynamics + readout layer
  reservoir numNodes 3 trainingSteps touchSteps inputWeights reservoirWeights

open DynamicalSystem
lrWiringDiagram : (numNodes trainingSteps touchSteps : ‚Ñï) ‚Üí (dt : ‚Ñù) ‚Üí (iw : InputWeights numNodes 3) ‚Üí (rw : ReservoirWeights numNodes) ‚Üí 
        Lens (interface (preLorRes numNodes trainingSteps touchSteps dt iw rw)) (emitter (ReservoirOutput 3 √ó (X √ó Y √ó Z)))
lrWiringDiagram numNodes trainingSteps touchSteps dt iw rw = outerOutputsFrom ‚áÜ innerInputsFrom
    where outerOutputsFrom : (X √ó Y √ó Z) √ó (X √ó Y √ó Z) √ó ReservoirOutput 3 ‚Üí ReservoirOutput 3 √ó (X √ó Y √ó Z)
          outerOutputsFrom (_ , test , ro) = ro , test
          innerInputsFrom : (X √ó Y √ó Z) √ó (X √ó Y √ó Z) √ó ReservoirOutput 3 ‚Üí ‚ä§ ‚Üí (‚ä§ √ó ‚ä§ √ó Vec ‚Ñù 3)
          innerInputsFrom (lorOut , lorTestOut , stillColl) tt = tt , tt , Lorenz.outToVec lorOut
          innerInputsFrom (lorOut , lorTestOut , stillTouch) tt = tt , tt , Lorenz.outToVec lorTestOut
          innerInputsFrom (lorOut , lorTestOut , predicting x‚ÇÅ) tt = tt , tt , x‚ÇÅ

lorenzReservoir : 
  (numNodes : ‚Ñï) ‚Üí
  (trainingSteps : ‚Ñï) ‚Üí
  (touchSteps : ‚Ñï) ‚Üí
  (dt : ‚Ñù) ‚Üí
  (inputWeights : InputWeights numNodes 3) ‚Üí
  (reservoirWeights : ReservoirWeights numNodes) ‚Üí 
  DynamicalSystem
lorenzReservoir numNodes trainingSteps touchSteps dt inputWeights reservoirWeights = 
  install (preLorRes numNodes trainingSteps touchSteps dt inputWeights reservoirWeights) 
          (emitter (ReservoirOutput 3 √ó (X √ó Y √ó Z)))
          (lrWiringDiagram numNodes trainingSteps touchSteps dt inputWeights reservoirWeights)

lorenzResSeq :
  (numNodes : ‚Ñï) ‚Üí
  (trainingSteps : ‚Ñï) ‚Üí
  (touchSteps : ‚Ñï) ‚Üí
  (lorenzInitialConditions : ‚Ñù √ó ‚Ñù √ó ‚Ñù ) ‚Üí
  (dt : ‚Ñù) ‚Üí
  (inputWeights : InputWeights numNodes 3) ‚Üí
  (reservoirWeights : ReservoirWeights numNodes) ‚Üí 
  Stream (ReservoirOutput 3 √ó (X √ó Y √ó Z)) _
lorenzResSeq numNodes trainingSteps touchSteps ( ix , iy , iz ) dt inputWeights reservoirWeights = 
  run (lorenzReservoir numNodes trainingSteps touchSteps dt inputWeights reservoirWeights)
      auto
      ((xnt ix , ynt iy , znt iz) , (xnt (ix + 3.0) , ynt (iy + 3.0) , znt (iz + 3.0)) , Coll (Vec.replicate 0.0) 0 [] [])

lorenzResList : 
  (numNodes : ‚Ñï) ‚Üí
  (trainingSteps : ‚Ñï) ‚Üí
  (touchSteps : ‚Ñï) ‚Üí
  (outputLength : ‚Ñï) ‚Üí
  (lorenzInitialConditions : ‚Ñù √ó ‚Ñù √ó ‚Ñù) ‚Üí
  (dt : ‚Ñù)
  (inputWeights : InputWeights numNodes 3) ‚Üí
  (reservoirWeights : ReservoirWeights numNodes) ‚Üí 
  Vec (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù) outputLength
lorenzResList numNodes trainingSteps touchSteps outputLength lorenzInitialConditions dt inputWeights reservoirWeights = 
    Vec.map discr ‚àò take outputLength ‚àò drop (trainingSteps +‚Ñï touchSteps +‚Ñï 1 {- we drop one more bc we dont want the transition -}) $ (lorenzResSeq numNodes trainingSteps touchSteps lorenzInitialConditions dt inputWeights reservoirWeights)
       where discr : (ReservoirOutput 3 √ó (X √ó Y √ó Z)) ‚Üí (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù)
             discr (stillColl , xnt actual_x , ynt actual_y , znt actual_z) = 0.0 , 0.0 , 0.0 , actual_x , actual_y , actual_z
             discr (stillTouch , xnt actual_x , ynt actual_y , znt actual_z) = 0.0 , 0.0 , 0.0 , actual_x , actual_y , actual_z
             discr (predicting (pred_x ‚à∑ pred_y ‚à∑ pred_z ‚à∑ []) , xnt actual_x , ynt actual_y , znt actual_z) = pred_x , pred_y , pred_z , actual_x , actual_y , actual_z
  