{-# OPTIONS --allow-unsolved-metas  #-}
module Dynamical.Reservoir.Matrix where

open import Data.Nat using (‚Ñï ; _‚à∏_  ; suc ) renaming (_+_ to _+‚Ñï_)
open import Data.Float renaming (Float to ‚Ñù ; from‚Ñï to from‚ÑïtoFloat) using (_√∑_ ; _-_ )
import Data.Float as Float
import Data.Nat as Nat using (_‚âü_)
open import Data.Fin using (_‚âü_ ; from‚Ñï ; Fin ; from‚Ñï< ; to‚Ñï)
import Data.Fin as Fin
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Data.Vec using (Vec ; tabulate ; zipWith ; _‚à∑_ ; transpose ; [_] ; lookup ; [] )
import Data.Vec as Vec
open import Data.List using (List ; [] ; _‚à∑_)
open import Function
open import Data.Bool using (if_then_else_ ; Bool ; true ; false)
open import Data.Maybe using (Maybe ; just ; nothing)
open import Data.List.Extrema
open import Relation.Binary.PropositionalEquality using (_‚â°_ ; refl)
open import Data.Product using (_√ó_ ; _,_ ; proj‚ÇÅ ; proj‚ÇÇ)


record Matrix (A : Set) (rows cols : ‚Ñï) : Set where
  constructor ùïÑ
  field
    values : Vec (Vec A cols) rows

open Matrix

record Num (A B C : Set) : Set where
  field
    _+_ : A ‚Üí B ‚Üí C
    _*_ : A ‚Üí B ‚Üí C
    
    zero : C
    one : C
    _eq_ : C ‚Üí C ‚Üí Bool
    
    _‚â§_ : C ‚Üí C ‚Üí Bool
  infixl 19 _‚â§_
  infixl 19 _eq_
  infixl 20 _+_
  infixl 21 _*_

open Num {{...}}

num‚Ñï‚Ñù‚Ñù : Num ‚Ñï ‚Ñù ‚Ñù
Num._+_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí from‚ÑïtoFloat n Float.+ x
Num._*_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí from‚ÑïtoFloat n Float.* x
Num.zero num‚Ñï‚Ñù‚Ñù = 0.0
Num.one num‚Ñï‚Ñù‚Ñù = 1.0
Num._eq_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñï‚Ñù‚Ñù = Float._‚â§·µá_

num‚Ñù‚Ñï‚Ñù : Num ‚Ñù ‚Ñï ‚Ñù
Num._+_ num‚Ñù‚Ñï‚Ñù = Œª x n ‚Üí x Float.+ from‚ÑïtoFloat n
Num._*_ num‚Ñù‚Ñï‚Ñù = Œª x n ‚Üí x Float.* from‚ÑïtoFloat n
Num.zero num‚Ñù‚Ñï‚Ñù = 0.0
Num.one num‚Ñù‚Ñï‚Ñù = 1.0
Num._eq_ num‚Ñù‚Ñï‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñù‚Ñï‚Ñù = Float._‚â§·µá_

num‚Ñù‚Ñù‚Ñù : Num ‚Ñù ‚Ñù ‚Ñù
Num._+_ num‚Ñù‚Ñù‚Ñù = Œª x n ‚Üí x Float.+ n
Num._*_ num‚Ñù‚Ñù‚Ñù = Œª x n ‚Üí x Float.* n
Num.zero num‚Ñù‚Ñù‚Ñù = 0.0
Num.one num‚Ñù‚Ñù‚Ñù = 1.0
Num._eq_ num‚Ñù‚Ñù‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñù‚Ñù‚Ñù = Float._‚â§·µá_

instance
  num‚Ñù‚Ñù‚ÑùInstance : Num ‚Ñù ‚Ñù ‚Ñù
  num‚Ñù‚Ñù‚ÑùInstance = num‚Ñù‚Ñù‚Ñù
  

_+·¥π_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Matrix A r c ‚Üí Matrix A r c
_+·¥π_ {{numA = numA}} (record { values = m‚ÇÅ }) (record { values = m‚ÇÇ }) =
  record { values = zipWith (zipWith (Num._+_ numA)) m‚ÇÅ m‚ÇÇ }
infixl 29 _+·¥π_

_+‚±Ω_ : ‚àÄ {A n} {{numA : Num A A A}} ‚Üí Vec A n ‚Üí Vec A n ‚Üí Vec A n
_+‚±Ω_ {{numA = numA}} = zipWith (Num._+_ numA)
infixl 29 _+‚±Ω_

_*·¥πs_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí A ‚Üí Matrix A r c
_*·¥πs_ {{numA = numA}} (record { values = m }) a = record { values = Vec.map (Vec.map ((Num._*_ numA) a)) m }

_*·¥π_ : ‚àÄ {A r c p} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Matrix A c p ‚Üí Matrix A r p
_*·¥π_ {A = A} {p = p} {{numA = numA}} (record { values = m‚ÇÅ }) (record { values = m‚ÇÇ }) =
  record { values = Vec.map (Œª row ‚Üí Vec.map (Œª col ‚Üí sum (zipWith (Num._*_ numA) row col)) (transpose m‚ÇÇ)) m‚ÇÅ }
  where
    sum : {a : ‚Ñï} ‚Üí Vec A a ‚Üí A
    sum [] = Num.zero numA
    sum (x ‚à∑ xs) = Num._+_ numA x (sum xs)
infixl 30 _*·¥π_

vecToColumnMatrix : ‚àÄ {A} {n : ‚Ñï} ‚Üí Vec A n ‚Üí Matrix A n 1
vecToColumnMatrix v = ùïÑ (Vec.map (Œª x ‚Üí [ x ]) v)

vecToRowMatrix : ‚àÄ {A} {n : ‚Ñï} ‚Üí Vec A n ‚Üí Matrix A 1 n
vecToRowMatrix v = ùïÑ [ v ]

_·µÄ : ‚àÄ {A r c} ‚Üí Matrix A r c ‚Üí Matrix A c r
(ùïÑ m) ·µÄ = ùïÑ (transpose m)
infixl 45 _·µÄ

transposeWorks : ‚àÄ {one two thr} ‚Üí _·µÄ
  (ùïÑ $
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  ) ‚â°
  (ùïÑ $
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑ []
  )
transposeWorks = refl

map : ‚àÄ {A B r c} ‚Üí (A ‚Üí B) ‚Üí Matrix A r c ‚Üí Matrix B r c
map f (ùïÑ v) = ùïÑ (Vec.map (Vec.map f) v)

rowMatrixToVec : ‚àÄ {A} {n : ‚Ñï} ‚Üí Matrix A 1 n ‚Üí Vec A n
rowMatrixToVec (ùïÑ (v ‚à∑ [])) = v

-- Might be too inefficient
columnMatrixToVec : ‚àÄ {A} {n : ‚Ñï} ‚Üí Matrix A n 1 ‚Üí Vec A n
columnMatrixToVec m = rowMatrixToVec (m ·µÄ)

_*·¥π‚±Ω_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Vec A c ‚Üí Vec A r
m *·¥π‚±Ω v = columnMatrixToVec (m *·¥π vecToColumnMatrix v)
infixl 31 _*·¥π‚±Ω_

replicate : ‚àÄ {A} ‚Üí {r c : ‚Ñï} ‚Üí A ‚Üí Matrix A r c
replicate = ùïÑ ‚àò Vec.replicate ‚àò Vec.replicate

identity : ‚àÄ {A} {n : ‚Ñï} {{numA : Num A A A}} ‚Üí Matrix A n n
identity  {n = n} {{numA = numA}} = ùïÑ (tabulate Œª i ‚Üí tabulate Œª j ‚Üí if ‚åä i ‚âü j ‚åã then Num.one numA else Num.zero numA)

maxIdx : ‚àÄ {A n} {{numA : Num A A A}} ‚Üí Vec A (suc n) ‚Üí Fin (suc n)
maxIdx {A} {n} {{numA = numA}} v = proj‚ÇÅ biggest
  where indicesAndValues : Vec (Fin (suc n) √ó A) (suc n)
        indicesAndValues = Vec.zip (Vec.allFin (suc n)) v
        step : Fin (suc n) √ó A ‚Üí Fin (suc n) √ó A ‚Üí Fin (suc n) √ó A
        step (biggestSoFarIndex , biggestSoFarValue) (curIndex , curValue) = 
          if Num._‚â§_ numA biggestSoFarValue curValue 
            then curIndex , curValue 
            else biggestSoFarIndex , biggestSoFarValue
        biggest = Vec.foldl‚ÇÅ step indicesAndValues

heee = maxIdx (-7.0 ‚à∑ 1.0 ‚à∑  2.0 ‚à∑ 4.0 ‚à∑  3.0 ‚à∑ []) 

swapRows : ‚àÄ {A} ‚Üí {n m : ‚Ñï} ‚Üí Fin n ‚Üí Fin n ‚Üí Matrix A n m ‚Üí Matrix A n m
swapRows i j mat@(ùïÑ m) = ùïÑ (Vec.updateAt i (Œª _ ‚Üí lookup m j) (Vec.updateAt j (Œª _ ‚Üí lookup m i) m))

swapRowsWorks : ‚àÄ {one two thr} ‚Üí swapRows Fin.zero (Fin.suc Fin.zero) 
  (ùïÑ $
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  ) ‚â°
  (ùïÑ $
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  )
swapRowsWorks = refl

-- LU decomposition
record LUP (A : Set) (n : ‚Ñï) : Set where
  constructor MkLUP
  field
    L : Matrix A n n
    U : Matrix A n n
    P : Matrix A n n

findPivot : ‚àÄ {A m n} {{numA : Num A A A}} ‚Üí (k : Fin (to‚Ñï m +‚Ñï n)) ‚Üí Matrix A (to‚Ñï k +‚Ñï n) (to‚Ñï k +‚Ñï n) ‚Üí Fin (to‚Ñï k +‚Ñï n)
findPivot {A} {n} {{numA}} k (ùïÑ m) = {!   !}


-- luDecomposition : ‚àÄ {A} {{numA : Num A A A}} ‚Üí {n : ‚Ñï} ‚Üí Matrix A n n ‚Üí LUP A n
-- luDecomposition {A} {{numA}} {n}  mat@(ùïÑ m) = MkLUP l u p
--   where
--     step : Fin n ‚Üí (Matrix A n n √ó Matrix A n n √ó Matrix A n n) ‚Üí Matrix A n n √ó Matrix A n n √ó Matrix A n n
--     step k (ùïÑ l , ùïÑ u , ùïÑ p) = (l' , u' , p')
--       where
--         -- Find the pivot index and swap the rows in P, L, and U
--         pivotIdx = maxIdx (Vec.map (Œª row ‚Üí Vec.drop (Fin.to‚Ñï k) row) u)
--         p' = swapRows k pivotIdx p
--         u' = swapRows k pivotIdx u
--         l' = swapRows k pivotIdx (record { values = Vec.updateAt k (const (lookup l k Vec.++ (0 ‚à∑ Vec.replicate k Num.zero numA))) l })
        
--         -- Perform Gaussian elimination
--         elim : ‚Ñï ‚Üí Matrix A n n ‚Üí Matrix A n n
--         elim i u =
--           let
--             factor = Num._*_ numA (Num._*_ numA (Num.one numA) (lookup u i k)) (lookup u k k)
--           in
--             record { values = Vec.updateAt i (const (Vec.zipWith (Num._+_ numA) (lookup u i) (Vec.map (Num._*_ numA factor) (lookup u k)))) u }

--         -- Update U and L matrices
--         u'' = Vec.foldl elim u' (Vec.allFin n)
--         l'' = Vec.foldl (Œª i l ‚Üí record { values = Vec.updateAt i (const (Vec.updateAt k (const (lookup u i k)) (lookup l i))) l }) l' (Vec.allFin n)

--     -- Initialize L, U, and P matrices
--     u‚ÇÄ = mat
--     l‚ÇÄ = identity
--     p‚ÇÄ = identity

--     -- Perform LU decomposition
--     lup : (Matrix A n n √ó Matrix A n n √ó Matrix A n n)
--     lup = Vec.foldl step (l‚ÇÄ , u‚ÇÄ , p‚ÇÄ) (Vec.allFin n)
--     l = proj‚ÇÅ lup
--     u = proj‚ÇÅ (proj‚ÇÇ lup)
--     p = proj‚ÇÇ (proj‚ÇÇ lup)

_‚Åª¬π : ‚àÄ {A} {{numA : Num A A A}} {n : ‚Ñï} ‚Üí Matrix A n n ‚Üí Matrix A n n
_‚Åª¬π m = {!   !}
infixl 40 _‚Åª¬π

pseudoinverse : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí A ‚Üí Matrix A r c ‚Üí Matrix A c r
pseudoinverse {A} {r} {c} {{numA = numA}} ridge m =
  let
    aTa = m ·µÄ *·¥π m
    aTaPlusLambdaI = aTa +·¥π (identity *·¥πs ridge)
  in
    aTaPlusLambdaI ‚Åª¬π *·¥π m ·µÄ
  

-- Calculate the dot product of two vectors.
-- Define a function to update the output weights
updateOutputWeights :  {numNodes systemDim : ‚Ñï} ‚Üí OutputWeights numNodes systemDim ‚Üí ‚Ñù ‚Üí Vec ‚Ñù numNodes ‚Üí Vec ‚Ñù systemDim ‚Üí OutputWeights numNodes systemDim
updateOutputWeights w learningRate state target = w + learningRate ‚äó (outerProduct (target - (w √ó state)) state)

-- Initialize the output weights to a zero matrix
initialOutputWeights :  {numNodes systemDim : ‚Ñï} ‚Üí  OutputWeights numNodes systemDim
initialOutputWeights = zeroMatrix systemDim numNodes

-- Define a learning rate (you can choose an appropriate value)
learningRate : ‚Ñù
learningRate = 0.1

-- LMS algorithm for multiple iterations.
-- lmsAlgorithm : ‚àÄ {n A} {{numA : Num A A A}} ‚Üí A ‚Üí Vec A n ‚Üí Vec A n ‚Üí Vec A n ‚Üí Vec (A √ó Vec A n)
-- lmsAlgorithm Œº w [] [] = []
-- lmsAlgorithm Œº w (d ‚à∑ ds) (x ‚à∑ xs) =
--   let (e, w') = lmsIteration Œº w d x
--   in (e , w') ‚à∑ lmsAlgorithm Œº w' ds xs
