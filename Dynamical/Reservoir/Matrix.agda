{-# OPTIONS --allow-unsolved-metas  #-}
module Dynamical.Reservoir.Matrix where

open import Data.Nat using (‚Ñï ; _‚à∏_  ; suc ) renaming (_+_ to _+‚Ñï_)
open import Data.Float renaming (Float to ‚Ñù ; from‚Ñï to from‚ÑïtoFloat) using (_√∑_ ; _-_ )
import Data.Float as Float
import Data.Nat as Nat using (_‚âü_)
open import Data.Fin using (_‚âü_ ; from‚Ñï ; Fin ; from‚Ñï< ; to‚Ñï)
import Data.Fin as Fin
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Data.Vec using (Vec ; tabulate ; zipWith ; _‚à∑_ ; transpose ; [_] ; lookup ; [] )
import Data.Vec as Vec
open import Data.List using (List ; [] ; _‚à∑_)
open import Function
open import Data.Bool using (if_then_else_ ; Bool ; true ; false)
open import Data.Maybe using (Maybe ; just ; nothing)
open import Data.List.Extrema
open import Relation.Binary.PropositionalEquality using (_‚â°_ ; refl)
open import Data.Product using (_√ó_ ; _,_ ; proj‚ÇÅ ; proj‚ÇÇ)


record Matrix (A : Set) (rows cols : ‚Ñï) : Set where
  constructor ùïÑ
  field
    values : Vec (Vec A cols) rows

open Matrix

record Num (A B C : Set) : Set where
  field
    _+_ : A ‚Üí B ‚Üí C
    _*_ : A ‚Üí B ‚Üí C
    
    zero : C
    one : C
    _eq_ : C ‚Üí C ‚Üí Bool
    
    _‚â§_ : C ‚Üí C ‚Üí Bool
  infixl 19 _‚â§_
  infixl 19 _eq_
  infixl 20 _+_
  infixl 21 _*_

open Num {{...}}

num‚Ñï‚Ñù‚Ñù : Num ‚Ñï ‚Ñù ‚Ñù
Num._+_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí from‚ÑïtoFloat n Float.+ x
Num._*_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí from‚ÑïtoFloat n Float.* x
Num.zero num‚Ñï‚Ñù‚Ñù = 0.0
Num.one num‚Ñï‚Ñù‚Ñù = 1.0
Num._eq_ num‚Ñï‚Ñù‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñï‚Ñù‚Ñù = Float._‚â§·µá_

num‚Ñù‚Ñï‚Ñù : Num ‚Ñù ‚Ñï ‚Ñù
Num._+_ num‚Ñù‚Ñï‚Ñù = Œª x n ‚Üí x Float.+ from‚ÑïtoFloat n
Num._*_ num‚Ñù‚Ñï‚Ñù = Œª x n ‚Üí x Float.* from‚ÑïtoFloat n
Num.zero num‚Ñù‚Ñï‚Ñù = 0.0
Num.one num‚Ñù‚Ñï‚Ñù = 1.0
Num._eq_ num‚Ñù‚Ñï‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñù‚Ñï‚Ñù = Float._‚â§·µá_

num‚Ñù‚Ñù‚Ñù : Num ‚Ñù ‚Ñù ‚Ñù
Num._+_ num‚Ñù‚Ñù‚Ñù = Œª x n ‚Üí x Float.+ n
Num._*_ num‚Ñù‚Ñù‚Ñù = Œª x n ‚Üí x Float.* n
Num.zero num‚Ñù‚Ñù‚Ñù = 0.0
Num.one num‚Ñù‚Ñù‚Ñù = 1.0
Num._eq_ num‚Ñù‚Ñù‚Ñù = Œª n x ‚Üí ‚åä n Float.‚âü x ‚åã
Num._‚â§_ num‚Ñù‚Ñù‚Ñù = Float._‚â§·µá_

instance
  num‚Ñù‚Ñù‚ÑùInstance : Num ‚Ñù ‚Ñù ‚Ñù
  num‚Ñù‚Ñù‚ÑùInstance = num‚Ñù‚Ñù‚Ñù
  

_+·¥π_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Matrix A r c ‚Üí Matrix A r c
_+·¥π_ {{numA = numA}} (record { values = m‚ÇÅ }) (record { values = m‚ÇÇ }) =
  record { values = zipWith (zipWith (Num._+_ numA)) m‚ÇÅ m‚ÇÇ }
infixl 29 _+·¥π_

_+‚±Ω_ : ‚àÄ {A n} {{numA : Num A A A}} ‚Üí Vec A n ‚Üí Vec A n ‚Üí Vec A n
_+‚±Ω_ {{numA = numA}} = zipWith (Num._+_ numA)
infixl 29 _+‚±Ω_

_*·¥πs_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí A ‚Üí Matrix A r c
_*·¥πs_ {{numA = numA}} (record { values = m }) a = record { values = Vec.map (Vec.map ((Num._*_ numA) a)) m }

_*·¥π_ : ‚àÄ {A r c p} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Matrix A c p ‚Üí Matrix A r p
_*·¥π_ {A = A} {p = p} {{numA = numA}} (record { values = m‚ÇÅ }) (record { values = m‚ÇÇ }) =
  record { values = Vec.map (Œª row ‚Üí Vec.map (Œª col ‚Üí sum (zipWith (Num._*_ numA) row col)) (transpose m‚ÇÇ)) m‚ÇÅ }
  where
    sum : {a : ‚Ñï} ‚Üí Vec A a ‚Üí A
    sum [] = Num.zero numA
    sum (x ‚à∑ xs) = Num._+_ numA x (sum xs)
infixl 30 _*·¥π_

vecToColumnMatrix : ‚àÄ {A} {n : ‚Ñï} ‚Üí Vec A n ‚Üí Matrix A n 1
vecToColumnMatrix v = ùïÑ (Vec.map (Œª x ‚Üí [ x ]) v)

vecToRowMatrix : ‚àÄ {A} {n : ‚Ñï} ‚Üí Vec A n ‚Üí Matrix A 1 n
vecToRowMatrix v = ùïÑ [ v ]

_·µÄ : ‚àÄ {A r c} ‚Üí Matrix A r c ‚Üí Matrix A c r
(ùïÑ m) ·µÄ = ùïÑ (transpose m)
infixl 45 _·µÄ

transposeWorks : ‚àÄ {one two thr} ‚Üí _·µÄ
  (ùïÑ $
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  ) ‚â°
  (ùïÑ $
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑
    (one ‚à∑  two ‚à∑  thr ‚à∑ []) ‚à∑ []
  )
transposeWorks = refl

map : ‚àÄ {A B r c} ‚Üí (A ‚Üí B) ‚Üí Matrix A r c ‚Üí Matrix B r c
map f (ùïÑ v) = ùïÑ (Vec.map (Vec.map f) v)

rowMatrixToVec : ‚àÄ {A} {n : ‚Ñï} ‚Üí Matrix A 1 n ‚Üí Vec A n
rowMatrixToVec (ùïÑ (v ‚à∑ [])) = v

-- Might be too inefficient
columnMatrixToVec : ‚àÄ {A} {n : ‚Ñï} ‚Üí Matrix A n 1 ‚Üí Vec A n
columnMatrixToVec m = rowMatrixToVec (m ·µÄ)

_*·¥π‚±Ω_ : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí Matrix A r c ‚Üí Vec A c ‚Üí Vec A r
m *·¥π‚±Ω v = columnMatrixToVec (m *·¥π vecToColumnMatrix v)
infixl 31 _*·¥π‚±Ω_

replicate : ‚àÄ {A} ‚Üí {r c : ‚Ñï} ‚Üí A ‚Üí Matrix A r c
replicate = ùïÑ ‚àò Vec.replicate ‚àò Vec.replicate

zeros : ‚àÄ {A} ‚Üí {r c : ‚Ñï} ‚Üí {{numA : Num A A A}} ‚Üí Matrix A r c
zeros = replicate zero

identity : ‚àÄ {A} {n : ‚Ñï} {{numA : Num A A A}} ‚Üí Matrix A n n
identity  {n = n} {{numA = numA}} = ùïÑ (tabulate Œª i ‚Üí tabulate Œª j ‚Üí if ‚åä i ‚âü j ‚åã then Num.one numA else Num.zero numA)

-- this needs to return the distance to the end of the vector as well HAHA
maxIdx : ‚àÄ {A n} {{numA : Num A A A}} ‚Üí Vec A (suc n) ‚Üí Fin (suc n)
maxIdx {A} {n} {{numA = numA}} v = proj‚ÇÅ biggest
  where indicesAndValues : Vec (Fin (suc n) √ó A) (suc n)
        indicesAndValues = Vec.zip (Vec.allFin (suc n)) v
        step : Fin (suc n) √ó A ‚Üí Fin (suc n) √ó A ‚Üí Fin (suc n) √ó A
        step (biggestSoFarIndex , biggestSoFarValue) (curIndex , curValue) = 
          if Num._‚â§_ numA biggestSoFarValue curValue 
            then curIndex , curValue 
            else biggestSoFarIndex , biggestSoFarValue
        biggest = Vec.foldl‚ÇÅ step indicesAndValues

heee = maxIdx (-7.0 ‚à∑ 1.0 ‚à∑  2.0 ‚à∑ 4.0 ‚à∑  3.0 ‚à∑ [])

sumPositiveProof : ‚àÄ {k y} ‚Üí k Nat.< k +‚Ñï suc y
sumPositiveProof {Nat.zero} {y} = Nat.s‚â§s Nat.z‚â§n
sumPositiveProof {suc k} {y} = Nat.s‚â§s sumPositiveProof

currentSubColumn : ‚àÄ {A y} ‚Üí {{numA : Num A A A}} ‚Üí let n = suc y in (k : ‚Ñï) ‚Üí  Matrix A (k +‚Ñï n) (k +‚Ñï n) ‚Üí Vec A n
currentSubColumn k (ùïÑ m) = let
  m·µÄ = Vec.transpose m
  currCol = Vec.lookup m·µÄ (Fin.from‚Ñï< {k} sumPositiveProof)
  in
  Vec.drop k currCol

mat : ‚àÄ {A : Set} {a‚ÇÅ‚ÇÅ a‚ÇÅ‚ÇÇ a‚ÇÅ‚ÇÉ a‚ÇÇ‚ÇÅ a‚ÇÇ‚ÇÇ a‚ÇÇ‚ÇÉ a‚ÇÉ‚ÇÅ a‚ÇÉ‚ÇÇ a‚ÇÉ‚ÇÉ : A}‚Üí Matrix A 3 3
mat {_} {a‚ÇÅ‚ÇÅ} {a‚ÇÅ‚ÇÇ} {a‚ÇÅ‚ÇÉ} {a‚ÇÇ‚ÇÅ} {a‚ÇÇ‚ÇÇ} {a‚ÇÇ‚ÇÉ} {a‚ÇÉ‚ÇÅ} {a‚ÇÉ‚ÇÇ} {a‚ÇÉ‚ÇÉ} = ùïÑ $ 
  (a‚ÇÅ‚ÇÅ ‚à∑  a‚ÇÅ‚ÇÇ ‚à∑  a‚ÇÅ‚ÇÉ ‚à∑ []) ‚à∑ 
  (a‚ÇÇ‚ÇÅ ‚à∑  a‚ÇÇ‚ÇÇ ‚à∑  a‚ÇÇ‚ÇÉ ‚à∑ []) ‚à∑ 
  (a‚ÇÉ‚ÇÅ ‚à∑  a‚ÇÉ‚ÇÇ ‚à∑  a‚ÇÉ‚ÇÉ ‚à∑ []) ‚à∑ []

hmm = maxIdx $ currentSubColumn 0 $ mat {‚Ñù} {4.0} {3.0} { -1.0} {5.0} {3.0} {2.0} {2.0} {1.0} {3.0}


toVecOfSum : ‚àÄ {A : Set} {k y} ‚Üí {p : k Nat.< (suc y)} ‚Üí Vec A (suc y) ‚Üí Vec A (k +‚Ñï suc (y ‚à∏ k))
toVecOfSum {k = Nat.zero} {p = Nat.s‚â§s Nat.z‚â§n} v = v
toVecOfSum {k = suc m} {p = Nat.s‚â§s (Nat.s‚â§s p)} (x ‚à∑ v) = x ‚à∑ (toVecOfSum {k = m} {p = (Nat.s‚â§s p)} v)


toMatrixOfSum : ‚àÄ {A : Set} {k y} ‚Üí {p : k Nat.< (suc y)} ‚Üí Matrix A (suc y) (suc y) ‚Üí Matrix A (k +‚Ñï suc (y ‚à∏ k)) (k +‚Ñï suc (y ‚à∏ k))
toMatrixOfSum {p = p} (ùïÑ v) = ùïÑ $ toVecOfSum {p = p} (Vec.map (toVecOfSum {p = p}) v)

toN< : {n : ‚Ñï} ‚Üí {k : Fin (suc n)} ‚Üí to‚Ñï k Nat.< suc n
toN< {Nat.zero} {Fin.zero} = Nat.s‚â§s Nat.z‚â§n
toN< {suc n} {Fin.zero} = Nat.s‚â§s Nat.z‚â§n
toN< {suc n} {Fin.suc k} = Nat.s‚â§s toN<


pr : ‚àÄ {n} (k : Fin (suc n)) (maxind : Fin (suc (n ‚à∏ to‚Ñï k))) ‚Üí to‚Ñï k +‚Ñï to‚Ñï maxind Nat.< suc n
pr {n} Fin.zero Fin.zero = Nat.s‚â§s Nat.z‚â§n
pr {suc n} Fin.zero (Fin.suc maxind) = Nat.s‚â§s (pr Fin.zero maxind )
pr {suc n} (Fin.suc k) maxind = Nat.s‚â§s (pr k maxind)

addBack : ‚àÄ {n} ‚Üí (k : Fin (suc n)) ‚Üí Fin (suc (n ‚à∏ to‚Ñï k)) ‚Üí Fin (suc n)
addBack k maxind = from‚Ñï< {(to‚Ñï k +‚Ñï to‚Ñï maxind)} (pr k maxind)
findPivot : ‚àÄ {A n} {{numA : Num A A A}} ‚Üí Matrix A (suc n) (suc n) ‚Üí Fin (suc n) ‚Üí Fin (suc n)
findPivot {A} {n} m k = let
  curSubCol = currentSubColumn (to‚Ñï k) (toMatrixOfSum {A} {k = to‚Ñï k} {y = n} {p = toN< {n} {k}} m)
  maxInd = maxIdx curSubCol
  in
  addBack k maxInd

hm = findPivot (mat {‚Ñù} 
   {16.0} {3.0} { 17.0} 
   {5.0} {3.0} {2.0} 
   {2.0} {4.0} {3.0}
   ) (Fin.suc Fin.zero)

swapRows : ‚àÄ {A} ‚Üí {n m : ‚Ñï} ‚Üí Fin n ‚Üí Fin n ‚Üí Matrix A n m ‚Üí Matrix A n m
swapRows i j mat@(ùïÑ m) = ùïÑ (Vec.updateAt i (Œª _ ‚Üí lookup m j) (Vec.updateAt j (Œª _ ‚Üí lookup m i) m))

swapRowsWorks : ‚àÄ {one two thr} ‚Üí swapRows Fin.zero (Fin.suc Fin.zero) 
  (ùïÑ $
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  ) ‚â°
  (ùïÑ $
    (two ‚à∑  two ‚à∑  two ‚à∑ []) ‚à∑
    (one ‚à∑  one ‚à∑  one ‚à∑ []) ‚à∑
    (thr ‚à∑  thr ‚à∑  thr ‚à∑ []) ‚à∑ []
  )
swapRowsWorks = refl

-- LU decomposition
record LUP (A : Set) (n : ‚Ñï) : Set where
  constructor MkLUP
  field
    L : Matrix A n n
    U : Matrix A n n
    P : Matrix A n n

luDecomposition : ‚àÄ {A} {{numA : Num A A A}} {n : ‚Ñï} ‚Üí Matrix A (suc n) (suc n) ‚Üí LUP A (suc n)
luDecomposition {A = A} {n = n} (ùïÑ m) = fromAccType $ Vec.foldl (Œª _ ‚Üí AccType) step initLUP (Vec.allFin (suc n))
  where AccType : Set
        AccType = Matrix A (suc n) (suc n) √ó LUP A (suc n)
        fromAccType : AccType ‚Üí LUP A (suc n)
        fromAccType = proj‚ÇÇ
        initLUP : AccType
        initLUP = ùïÑ m , MkLUP identity zeros identity
        step : AccType ‚Üí Fin (suc n) ‚Üí AccType
        step (mat@(ùïÑ v) , MkLUP L U P) ind = newA ,  MkLUP L' U' P'
          where pivot = findPivot mat ind
                swappedA : Matrix A (suc n) (suc n)
                swappedA = swapRows ind pivot mat
                L' : Matrix A (suc n) (suc n)
                L' = {!   !}
                newA : Matrix A (suc n) (suc n)
                newA = {!   !}
                U' : Matrix A (suc n) (suc n)
                U' = {!   !}
                P' : Matrix A (suc n) (suc n)
                P' = swapRows ind pivot P

_‚Åª¬π : ‚àÄ {A} {{numA : Num A A A}} {n : ‚Ñï} ‚Üí Matrix A n n ‚Üí Matrix A n n
_‚Åª¬π m = {!   !}
infixl 40 _‚Åª¬π

pseudoinverse : ‚àÄ {A r c} {{numA : Num A A A}} ‚Üí A ‚Üí Matrix A r c ‚Üí Matrix A c r
pseudoinverse {A} {r} {c} {{numA = numA}} ridge m =
  let
    aTa = m ·µÄ *·¥π m
    aTaPlusLambdaI = aTa +·¥π (identity *·¥πs ridge)
  in
    aTaPlusLambdaI ‚Åª¬π *·¥π m ·µÄ
