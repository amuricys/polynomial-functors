{-# OPTIONS --sized-types --guardedness #-}

module Dynamical.Reservoir.ModeDependent where

open import Dynamical.System
open import Data.Product using (_√ó_; _,_)
open import Data.Sum
open import Data.Unit
open import Data.Nat renaming (_+_ to _+‚Ñï_)
open import Data.Float renaming (Float to ‚Ñù; tanh to tanh1) hiding (‚åä_‚åã)
open import CategoryData.Everything renaming (_*_ to _*p_ ; _+_ to _+p_; Y to Y')
open import Codata.Stream
open import Dynamical.Matrix.Everything as Matrix using (Matrix ; _*‚±Ω·¥π_ ; _*·¥π‚±Ω_ ; _*·¥π_ ; _+·¥π_ ; _+‚±Ω_ ; _·µÄ ; _‚Åª¬π ; _*À¢·¥π_ ; eye)
open import Dynamical.Reservoir.State
open import Dynamical.Lorenz as Lorenz
open import Data.Vec as Vec using (Vec ; map ; _‚à∑_)
open import Data.Bool using (if_then_else_ ; Bool)
open import Relation.Nullary.Decidable using (‚åä_‚åã)
open import Function
open import Level

import Category.Monad.Reader
open import Category.Monad

is-‚â§ : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
is-‚â§ a b = ‚åä a Data.Nat.‚â§? b ‚åã

tanh : ‚àÄ {m n} ‚Üí Matrix ‚Ñù m n ‚Üí Matrix ‚Ñù m n
tanh = Matrix.map tanh1

data ReadoutOutput (systemDim : ‚Ñï) : Set where
  CD : ReadoutOutput systemDim
  R : Vec ‚Ñù systemDim ‚Üí ReadoutOutput systemDim

record CollectingDataInput (numNodes systemDim : ‚Ñï) : Set where
  constructor CDI
  field
    resStates : ReservoirState numNodes
    sysOutput : Vec ‚Ñù systemDim

record RunningInput (numNodes : ‚Ñï) : Set where
  constructor RI
  field
    resStates : ReservoirState numNodes

DependentInput : {numNodes systemDim : ‚Ñï} ‚Üí ReadoutOutput systemDim ‚Üí Set
DependentInput {numNodes} {systemDim} CD = CollectingDataInput numNodes systemDim
DependentInput {numNodes} (R _) = RunningInput numNodes

reservoir : (numNodes systemDim : ‚Ñï) ‚Üí DynamicalSystem
reservoir numNodes systemDim = MkDynamicalSystem (ReservoirState numNodes) interface (readout ‚áÜ update)
  where interface : Polynomial
        interface = MkPoly (ReservoirState numNodes) Œª _ ‚Üí Vec ‚Ñù systemDim √ó InputWeights numNodes systemDim √ó ReservoirWeights numNodes
        readout : ReservoirState numNodes ‚Üí ReservoirState numNodes
        readout = id
        update : ReservoirState numNodes ‚Üí Vec ‚Ñù systemDim √ó InputWeights numNodes systemDim √ó ReservoirWeights numNodes ‚Üí ReservoirState numNodes
        update (Res nodeStates) (inputSequence , inputWeights , reservoirWeights) = Res (Vec.map tanh1 (reservoirWeights *·¥π‚±Ω nodeStates +‚±Ω inputWeights *·¥π‚±Ω inputSequence ))

readoutLayer : (numNodes systemDim trainingSteps : ‚Ñï) ‚Üí DynamicalSystem
readoutLayer numNodes systemDim trainingSteps = MkDynamicalSystem (ReadoutLayerState numNodes systemDim) interface (readout ‚áÜ update)
  where interface : Polynomial
        interface = MkPoly (ReadoutOutput systemDim) DependentInput
        readout : ReadoutLayerState numNodes systemDim ‚Üí ReadoutOutput systemDim
        readout (Coll _) = CD -- don't care when training
        readout (Run (Running outputWeights (Res nodeStates))) = R (outputWeights ·µÄ *·¥π‚±Ω nodeStates)
        update : (fromPos : ReadoutLayerState numNodes systemDim) ‚Üí DependentInput (readout fromPos) ‚Üí ReadoutLayerState numNodes systemDim
        update (Coll (Collecting counter statesHistory systemHistory outputWeights)) (CDI newNodeStates systemOutput) = 
          if is-‚â§ counter trainingSteps then keepCollecting else trainThenRun
            where keepCollecting : ReadoutLayerState numNodes systemDim
                  keepCollecting = Coll (Collecting (1 +‚Ñï counter) (newNodeStates ‚à∑ statesHistory) (systemOutput ‚à∑ systemHistory) outputWeights)
                  trainThenRun : ReadoutLayerState numNodes systemDim
                  trainThenRun = Run (Running trainedOutput initialState)
                    where initialState : ReservoirState numNodes
                          initialState = Res (Vec.replicate 1.0)
                          trainedOutput : OutputWeights numNodes systemDim
                          trainedOutput = (statesHist ·µÄ *·¥π statesHist +·¥π ridge *À¢·¥π eye) ‚Åª¬π *·¥π (statesHist ·µÄ *·¥π systemHist) 
                            where statesHist : Matrix ‚Ñù counter numNodes
                                  statesHist = Matrix.ùïÑ (Vec.map ReservoirState.nodeStates statesHistory)
                                  systemHist : Matrix ‚Ñù counter systemDim
                                  systemHist = Matrix.ùïÑ systemHistory
                                  ridge = 0.00001
        update (Run (Running outputWeights reservoirState)) (RI resStates) = Run (Running outputWeights resStates)

preLorRes : (numNodes trainingSteps : ‚Ñï) ‚Üí InputWeights numNodes 3 ‚Üí ReservoirWeights numNodes ‚Üí DynamicalSystem
preLorRes numNodes trainingSteps inputWeights reservoirWeights = 
  lorenz &&& reservoir numNodes 3 &&& readoutLayer numNodes 3 trainingSteps

lorenzReservoirWiringDiagram :
  (numNodes : ‚Ñï) ‚Üí
  (inputWeights : InputWeights numNodes 3) ‚Üí
  (reservoirWeights : ReservoirWeights numNodes) ‚Üí
   Arrow 
    (DynamicalSystem.interface (preLorRes numNodes 3 inputWeights reservoirWeights))
    (Emitter (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù ‚äé ‚ä§))
lorenzReservoirWiringDiagram numNodes inputWeights reservoirWeights = outerOutputsFrom ‚áÜ innerInputsFrom
  where outerOutputsFrom : position
                           (DynamicalSystem.interface (preLorRes numNodes 3 inputWeights reservoirWeights)) ‚Üí
                           position (Emitter (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù ‚äé ‚ä§))
        outerOutputsFrom ((xnt x , ynt y , znt z) , res , R (predx Vec.‚à∑ predy Vec.‚à∑ predz Vec.‚à∑ Vec.[])) = inj‚ÇÅ (x , (y , (z , (predx , (predy , predz)))))
        outerOutputsFrom (lor , res , CD) = inj‚ÇÇ tt
        innerInputsFrom : (fromPos : position (DynamicalSystem.interface (preLorRes numNodes 3 (Matrix.replicate 1.0) (Matrix.replicate 1.0)))) ‚Üí
                          direction (Emitter (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù ‚äé ‚ä§)) (outerOutputsFrom fromPos) ‚Üí
                          direction (DynamicalSystem.interface (preLorRes numNodes 3 inputWeights reservoirWeights))
                          fromPos
        innerInputsFrom (lorOutput , resOutput , R readOutput) dir = tt , resInputRunning , readInputRunning
          where resInputRunning : direction (DynamicalSystem.interface (reservoir numNodes 3)) resOutput
                resInputRunning = readOutput , inputWeights , reservoirWeights
                readInputRunning : RunningInput numNodes
                readInputRunning = RI resOutput
        innerInputsFrom (lorOutput , resOutput , CD) dir = tt , resInputTraining , CDI resOutput (outToVec lorOutput)
           where resInputTraining : direction (DynamicalSystem.interface (reservoir numNodes 3)) resOutput
                 resInputTraining = Lorenz.outToVec lorOutput , inputWeights , reservoirWeights
                 readInputTraining : ReservoirState numNodes
                 readInputTraining = resOutput
                 

lorenzReservoir : 
  (numNodes : ‚Ñï) ‚Üí
  (trainingSteps : ‚Ñï) ‚Üí
  (inputWeights : InputWeights numNodes 3) ‚Üí
  (reservoirWeights : ReservoirWeights numNodes) ‚Üí 
  DynamicalSystem
lorenzReservoir numNodes trainingSteps inputWeights reservoirWeights = 
  install (preLorRes numNodes trainingSteps inputWeights reservoirWeights) 
          (Emitter (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù ‚äé ‚ä§))
          (lorenzReservoirWiringDiagram numNodes inputWeights reservoirWeights)

    
lorenzResSeq : 
  (numNodes : ‚Ñï) ‚Üí
  (trainingSteps : ‚Ñï) ‚Üí
  (inputWeights : InputWeights numNodes 3) ‚Üí
  (reservoirWeights : ReservoirWeights numNodes) ‚Üí 
  (collState :  CollectingDataState numNodes 3) ‚Üí Stream (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù ‚äé ‚ä§) _
lorenzResSeq numNodes trainingSteps inputWeights reservoirWeights collState = 
  run (lorenzReservoir numNodes trainingSteps inputWeights reservoirWeights)
      auto
      ((xnt 1.0 , ynt 1.0 , znt 1.0) , (Res (Vec.replicate 0.0)) , Coll collState)

lorenzResList : 
  (numNodes : ‚Ñï) ‚Üí
  (trainingSteps : ‚Ñï) ‚Üí
  (inputWeights : InputWeights numNodes 3) ‚Üí
  (reservoirWeights : ReservoirWeights numNodes) ‚Üí 
  (collState :  CollectingDataState numNodes 3) ‚Üí Vec (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù) 5000
lorenzResList numNodes trainingSteps inputWeights reservoirWeights collState = Vec.map (\{(inj‚ÇÅ x‚ÇÅ) ‚Üí x‚ÇÅ
                                                                                        ; (inj‚ÇÇ tt) ‚Üí 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0} ) (take 5000 $ lorenzResSeq numNodes trainingSteps inputWeights reservoirWeights collState)
 