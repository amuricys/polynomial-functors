{-# OPTIONS --sized-types --guardedness #-}

module Dynamical.Reservoir.ModeDependent where

open import Dynamical.System
open import Data.Product
open import Data.Nat renaming (_+_ to _+‚Ñï_)
open import Data.Float renaming (Float to ‚Ñù; tanh to tanh1) hiding (‚åä_‚åã)
open import Common.CategoryData renaming (_*_ to _*p_ ; _+_ to _+p_) hiding (Y)
open import Dynamical.Reservoir.Matrix as Matrix
open import Dynamical.Reservoir.Initialize
open import Dynamical.Reservoir.State
open import Dynamical.Lorenz
open import Data.Vec hiding (_>>=_)
open import Data.List as List
open import Data.Bool using (if_then_else_ ; Bool)
open import Relation.Nullary.Decidable using (‚åä_‚åã)

open import Level

import Category.Monad.Reader
open import Category.Monad
is-‚â§ : ‚Ñï ‚Üí ‚Ñï ‚Üí Bool
is-‚â§ a b = ‚åä a Data.Nat.‚â§? b ‚åã

tanh : ‚àÄ {m n} ‚Üí Matrix ‚Ñù m n ‚Üí Matrix ‚Ñù m n
tanh = Matrix.map tanh1


activation : ‚àÄ {m n q : ‚Ñï} ‚Üí Matrix ‚Ñù m n ‚Üí Matrix ‚Ñù n q ‚Üí Matrix ‚Ñù m q 
activation nodeStates outputWeights = tanh (nodeStates *·¥π outputWeights)

lorenzReservoir : {systemDim numNodes : ‚Ñï} ‚Üí (trainingSteps : ‚Ñï) ‚Üí Matrix ‚Ñù systemDim numNodes ‚Üí Matrix ‚Ñù numNodes numNodes ‚Üí DynamicalSystem
lorenzReservoir {systemDim} {numNodes} trainingSteps inputWeights reservoirWeights = 
  lorenz &&& reservoir
  where reservoir : DynamicalSystem
        reservoir = MkDynamicalSystem (ReservoirState numNodes systemDim) interface (readout ‚áÑ update)
          where interface : Polynomial
                interface = MkPoly (Vec ‚Ñù systemDim) Œª _ ‚Üí Vec ‚Ñù systemDim
                
                readout : ReservoirState numNodes systemDim ‚Üí Vec ‚Ñù systemDim
                readout (T (Training nodeStates _ outputWeights _)) = fromMatrix (activation (vecToRowMatrix nodeStates) outputWeights)
                              where fromMatrix : Matrix ‚Ñù 1 systemDim ‚Üí Vec ‚Ñù systemDim
                                    fromMatrix (ùïÑ (v ‚à∑ [])) = v
                readout (R (Running nodeStates outputWeights _)) = fromMatrix (activation (vecToRowMatrix nodeStates) outputWeights)
                              where fromMatrix : Matrix ‚Ñù 1 systemDim ‚Üí Vec ‚Ñù systemDim
                                    fromMatrix (ùïÑ (v ‚à∑ [])) = v
                update : ReservoirState numNodes systemDim ‚Üí (Vec ‚Ñù systemDim) ‚Üí ReservoirState numNodes systemDim
                update (T (Training nodeStates statesHistory outputWeights counter)) i =
                  if is-‚â§ counter trainingSteps then 
                    T keepTraining else
                    R startPredicting
                  where 
                        keepTraining : TrainingState numNodes systemDim
                        keepTraining = Training newNodeStates (newNodeStates List.‚à∑ statesHistory) outputWeights (counter +‚Ñï 1)
                          where newNodeStates : Vec ‚Ñù numNodes
                                newNodeStates = {!   !}
                        -- The first input to the predicting state ought to be the predicted system's dynamics
                        -- after that, it loops back on itself
                        startPredicting : RunningState numNodes systemDim
                        startPredicting = Running (initialPredictionStates i) newOutputWeights (counter +‚Ñï 1)
                          where newOutputWeights : OutputWeights numNodes systemDim
                                newOutputWeights = {!   !}
                                initialPredictionStates : Vec ‚Ñù systemDim ‚Üí Vec ‚Ñù numNodes
                                initialPredictionStates = {!   !}
                update (R (Running nodeStates outputWeights counter)) i = R (Running {! newNodeStates  !} outputWeights (counter +‚Ñï 1))
   
open import Level
open import Data.String using (String)
open import Data.Float renaming (Float to ‚Ñù; tanh to tanh1) hiding (‚åä_‚åã)
open import Category.Monad.Reader ‚Ñù 0‚Ñì as Q
open import Category.Monad.Reader String 0‚Ñì as S

hey2 : S.Reader String
hey2 =
  let open S.RawMonadReader S.ReaderMonadReader
  in 
  do
  num ‚Üê ask
  pure "hello"

hey3 : Q.Reader String
hey3 = let
  open Q.RawMonadReader Q.ReaderMonadReader
  in do
  num ‚Üê ask
  pure "hello"


  